import{s as t}from"../entry/index.BTJ1QXK9.js";const e=new class{baseUrl;baseURL;constructor(t="http://localhost:8000"){this.baseUrl=t,this.baseURL=t}async getAuthHeaders(){const{data:{session:e}}=await t.auth.getSession();if(!e?.access_token)throw new Error("Usuário não autenticado");return{"Content-Type":"application/json",Authorization:`Bearer ${e.access_token}`}}async get(t){const e=await this.getAuthHeaders(),s=await fetch(`${this.baseUrl}${t}`,{method:"GET",headers:e});if(!s.ok){const t=await s.json().catch((()=>({})));throw new Error(t.detail||`HTTP error! status: ${s.status}`)}return s.json()}async post(t,e){const s=await this.getAuthHeaders(),r=await fetch(`${this.baseUrl}${t}`,{method:"POST",headers:s,body:JSON.stringify(e)});if(!r.ok){const t=await r.json().catch((()=>({})));throw new Error(t.detail||`HTTP error! status: ${r.status}`)}return r.json()}async put(t,e){const s=await this.getAuthHeaders(),r=await fetch(`${this.baseUrl}${t}`,{method:"PUT",headers:s,body:JSON.stringify(e)});if(!r.ok){const t=await r.json().catch((()=>({})));throw new Error(t.detail||`HTTP error! status: ${r.status}`)}return r.json()}async delete(t){const e=await this.getAuthHeaders(),s=await fetch(`${this.baseUrl}${t}`,{method:"DELETE",headers:e});if(!s.ok){const t=await s.json().catch((()=>({})));throw new Error(t.detail||`HTTP error! status: ${s.status}`)}return s.json()}};const s=new class{convertSupabaseToDiagnostic(t){return{...t,status:t.status,cpu_metrics:t.cpu_metrics,memory_metrics:t.memory_metrics,disk_metrics:t.disk_metrics,network_metrics:t.network_metrics,antivirus_metrics:t.antivirus_metrics,driver_metrics:t.driver_metrics}}convertDiagnosticToSupabase(t){return{...t,cpu_metrics:t.cpu_metrics?t.cpu_metrics:null,memory_metrics:t.memory_metrics?t.memory_metrics:null,disk_metrics:t.disk_metrics?t.disk_metrics:null,network_metrics:t.network_metrics?t.network_metrics:null,antivirus_metrics:t.antivirus_metrics?t.antivirus_metrics:null,driver_metrics:t.driver_metrics?t.driver_metrics:null}}async runDiagnostic(t){return e.post("/api/v1/diagnostics",t)}async getDiagnosticStatus(t){return e.get(`/api/v1/diagnostics/${t}`)}async getDiagnosticHistory(s){try{return await e.get("/api/v1/diagnostic/history",{params:s})}catch(r){let e=t.from("diagnostics").select("*",{count:"exact"});s?.device_id&&(e=e.eq("device_id",s.device_id)),s?.status&&(e=e.eq("status",s.status)),s?.start_date&&(e=e.gte("created_at",s.start_date)),s?.end_date&&(e=e.lte("created_at",s.end_date));const a=s?.page||1,i=s?.limit||10,o=(a-1)*i;e=e.order("created_at",{ascending:!1}).range(o,o+i-1);const{data:n,error:c,count:d}=await e;if(c)throw new Error(c.message);return{data:(n||[]).map(this.convertSupabaseToDiagnostic),total:d||0,page:a,limit:i}}}async getDevices(){const{data:e,error:s}=await t.from("devices").select("*").order("created_at",{ascending:!1});if(s)throw new Error(s.message);return e||[]}async getDevice(e){const{data:s,error:r}=await t.from("devices").select("*").eq("id",e).maybeSingle();if(r)throw new Error(r.message);return s}async createDevice(e){const{data:{user:s}}=await t.auth.getUser();if(!s)throw new Error("Usuário não autenticado");const{data:r,error:a}=await t.from("devices").insert({...e,user_id:s.id}).select().single();if(a)throw new Error(a.message);return r}async updateDevice(e,s){const{data:r,error:a}=await t.from("devices").update(s).eq("id",e).select().single();if(a)throw new Error(a.message);return r}async deleteDevice(e){const{error:s}=await t.from("devices").delete().eq("id",e);if(s)throw new Error(s.message)}async getDiagnostics(){const{data:e,error:s}=await t.from("diagnostics").select("*").order("created_at",{ascending:!1});if(s)throw new Error(s.message);return(e||[]).map(this.convertSupabaseToDiagnostic)}async getDiagnostic(e){const{data:s,error:r}=await t.from("diagnostics").select("*").eq("id",e).maybeSingle();if(r)throw new Error(r.message);return s?this.convertSupabaseToDiagnostic(s):null}async saveDiagnostic(e){const{data:{user:s}}=await t.auth.getUser();if(!s)throw new Error("Usuário não autenticado");const r=this.convertDiagnosticToSupabase({...e,user_id:s.id}),{data:a,error:i}=await t.from("diagnostics").insert(r).select().single();if(i)throw new Error(i.message);return this.convertSupabaseToDiagnostic(a)}async updateDiagnostic(e,s){const r=this.convertDiagnosticToSupabase(s),{data:a,error:i}=await t.from("diagnostics").update(r).eq("id",e).select().single();if(i)throw new Error(i.message);return this.convertSupabaseToDiagnostic(a)}async executeFullDiagnostic(s){try{const i=await this.getDevice(s);if(!i)throw new Error("Dispositivo não encontrado");const o=await this.saveDiagnostic({device_id:s,status:"pending"});try{let a;try{a=await e.post("/api/v1/diagnostic/full",{device_id:s,diagnostic_id:o.id,system_info:{os:i.os||"Unknown",os_version:i.os_version||"Unknown",processor:i.processor||"Unknown",ram:i.ram||"Unknown",storage:i.storage||"Unknown"}})}catch(r){a=await this.runDiagnostic({device_id:s,system_info:{os:i.os||"Unknown",os_version:i.os_version||"Unknown",processor:i.processor||"Unknown",ram:i.ram||"Unknown",storage:i.storage||"Unknown"}})}const n=await this.updateDiagnostic(o.id,{status:a.status,cpu_status:a.cpu_status,cpu_metrics:a.cpu_metrics,memory_status:a.memory_status,memory_metrics:a.memory_metrics,disk_status:a.disk_status,disk_metrics:a.disk_metrics,network_status:a.network_status,network_metrics:a.network_metrics,health_score:a.health_score,raw_data:a.raw_data});return await this.updateDevice(s,{}),await t.from("devices").update({last_diagnostic_id:n.id}).eq("id",s),n}catch(a){return await this.updateDiagnostic(o.id,{status:"failed",error_message:a instanceof Error?a.message:"Erro desconhecido no microserviço"})}}catch(i){throw i}}};export{s as d};
