#!/usr/bin/env python3
"""
Verifica√ß√£o Final - Monitoramento da Corre√ß√£o DNS
TechZe Diagn√≥stico - Status Final
"""

import requests
import subprocess
import time
from datetime import datetime

def log(message, level="INFO"):
    """Log com timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def check_dns_resolution(domain):
    """Verifica resolu√ß√£o DNS"""
    try:
        result = subprocess.run(['nslookup', domain], 
                              capture_output=True, text=True, timeout=10)
        if "NXDOMAIN" not in result.stdout and "can't find" not in result.stdout:
            # Extrair o resultado
            lines = result.stdout.split('\n')
            for line in lines:
                if 'techze' in line.lower() and 'onrender.com' in line.lower():
                    if 'techze-frontend-app' in line:
                        return "‚úÖ CORRETO", line.strip()
                    elif 'techze-diagnostico-frontend' in line:
                        return "‚ùå ERRADO", line.strip()
            return "‚úÖ CONFIGURADO", "DNS resolvido"
        else:
            return "‚ùå N√ÉO CONFIGURADO", "NXDOMAIN"
    except Exception as e:
        return "‚ùå ERRO", str(e)

def test_http_access(url):
    """Testa acesso HTTP"""
    try:
        response = requests.get(url, timeout=10, allow_redirects=True)
        if response.status_code < 400:
            return "‚úÖ ACESS√çVEL", response.status_code, response.url
        else:
            return "‚ùå ERRO HTTP", response.status_code, response.url
    except requests.exceptions.RequestException as e:
        return "‚ùå INACESS√çVEL", "ERROR", str(e)

def check_complete_status():
    """Verifica status completo"""
    domains_to_check = [
        "techreparo.com",
        "www.techreparo.com"
    ]
    
    urls_to_test = [
        "https://techreparo.com",
        "https://www.techreparo.com",
        "https://techze-frontend-app.onrender.com"
    ]
    
    print(f"\n{'='*70}")
    print(f"üîç VERIFICA√á√ÉO COMPLETA - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*70}")
    
    # 1. Verifica√ß√£o DNS
    print("\nüåê RESOLU√á√ÉO DNS:")
    dns_correto = True
    for domain in domains_to_check:
        status, details = check_dns_resolution(domain)
        print(f"   üìç {domain:25} ‚Üí {status}")
        if details != "DNS resolvido":
            print(f"      {details}")
        if "‚ùå" in status:
            dns_correto = False
    
    # 2. Verifica√ß√£o HTTP
    print("\nüîó ACESSO HTTP:")
    http_funcionando = True
    for url in urls_to_test:
        status, code, final_url = test_http_access(url)
        print(f"   üìç {url:40} ‚Üí {status} ({code})")
        if final_url != url and isinstance(final_url, str):
            print(f"      Redirecionado para: {final_url}")
        if "‚ùå" in status:
            http_funcionando = False
    
    # 3. Status geral
    print(f"\n{'='*70}")
    print("üìä STATUS GERAL:")
    
    if dns_correto and http_funcionando:
        print("   üéâ TUDO FUNCIONANDO PERFEITAMENTE!")
        status_geral = "SUCESSO"
    elif dns_correto and not http_funcionando:
        print("   üîÑ DNS correto, aguardando propaga√ß√£o...")
        status_geral = "AGUARDANDO_PROPAGACAO"  
    elif not dns_correto:
        print("   ‚ö†Ô∏è  DNS ainda n√£o corrigido no IONOS")
        status_geral = "DNS_PENDENTE"
    else:
        print("   ‚ùå Problemas identificados")
        status_geral = "ERRO"
    
    print(f"{'='*70}\n")
    
    return status_geral

def monitor_continuous():
    """Monitoramento cont√≠nuo"""
    print("üöÄ INICIANDO MONITORAMENTO CONT√çNUO")
    print("‚èπÔ∏è  Pressione Ctrl+C para parar")
    print("üîÑ Verifica√ß√£o a cada 1 minuto")
    
    try:
        while True:
            status = check_complete_status()
            
            if status == "SUCESSO":
                print("üéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
                print("‚úÖ Todos os dom√≠nios est√£o funcionando!")
                break
            elif status == "DNS_PENDENTE":
                print("‚ö†Ô∏è  Aguardando corre√ß√£o DNS no IONOS...")
            elif status == "AGUARDANDO_PROPAGACAO":
                print("üîÑ Aguardando propaga√ß√£o DNS...")
            
            print("‚è≥ Pr√≥xima verifica√ß√£o em 60 segundos...\n")
            time.sleep(60)
            
    except KeyboardInterrupt:
        print("\nüõë Monitoramento interrompido pelo usu√°rio")

def verify_once():
    """Verifica√ß√£o √∫nica"""
    status = check_complete_status()
    
    if status == "SUCESSO":
        print("üéâ PARAB√âNS! Configura√ß√£o finalizada com sucesso!")
    elif status == "DNS_PENDENTE":
        print("üìù PR√ìXIMO PASSO: Corrija o DNS no IONOS conforme CONFIGURACAO_FINAL_CORRETA.md")
    elif status == "AGUARDANDO_PROPAGACAO":
        print("‚è≥ AGUARDE: DNS corrigido, aguardando propaga√ß√£o (15-30 min)")
    
    return status

def main():
    """Fun√ß√£o principal"""
    print("üîç VERIFICA√á√ÉO FINAL DA CONFIGURA√á√ÉO")
    print("="*50)
    
    # Verifica√ß√£o √∫nica primeiro
    status = verify_once()
    
    if status != "SUCESSO":
        resposta = input("\nüîÑ Deseja monitorar continuamente? (s/n): ").lower()
        if resposta in ['s', 'sim', 'y', 'yes']:
            monitor_continuous()
    
    print("\n‚úÖ Verifica√ß√£o finalizada!")

if __name__ == "__main__":
    main()