#!/usr/bin/env python3
"""
Teste r√°pido do backend TechZe Diagn√≥stico
Valida se todos os componentes est√£o funcionando
"""

def test_imports():
    """Testa imports principais"""
    print("üîç Testando imports...")
    
    try:
        # Testa modelos
        from app.models.orcamento import Orcamento, OrcamentoCreate, DadosCliente, DadosEquipamento
        print("‚úÖ Modelos de or√ßamento")
        
        from app.models.estoque import EstoqueItem
        print("‚úÖ Modelos de estoque")
        
        from app.models.ordem_servico import OrdemServico
        print("‚úÖ Modelos de ordem de servi√ßo")
        
        # Testa services
        from app.services.orcamento_service import OrcamentoService
        print("‚úÖ Service de or√ßamento")
        
        # Testa APIs
        from app.api.endpoints.orcamentos import router
        print("‚úÖ API de or√ßamentos")
        
        # Testa configura√ß√µes
        from app.core.config import get_settings
        settings = get_settings()
        print(f"‚úÖ Configura√ß√µes carregadas - Projeto: {settings.PROJECT_NAME}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos imports: {e}")
        return False

def test_models():
    """Testa cria√ß√£o de modelos"""
    print("\nüèóÔ∏è Testando modelos...")
    
    try:
        from app.models.orcamento import DadosCliente, DadosEquipamento, Orcamento
        
        # Cria dados de teste
        cliente = DadosCliente(
            nome="Cliente Teste",
            telefone="11999999999",
            email="teste@email.com"
        )
        
        equipamento = DadosEquipamento(
            tipo="Desktop",
            marca="Dell",
            modelo="OptiPlex",
            problema_relatado="Computador n√£o liga"
        )
        
        # Cria or√ßamento
        orcamento = Orcamento(
            numero="ORC-2025-001",
            cliente=cliente,
            equipamento=equipamento
        )
        
        print(f"‚úÖ Or√ßamento criado: {orcamento.numero}")
        print(f"   Cliente: {orcamento.cliente.nome}")
        print(f"   Equipamento: {orcamento.equipamento.tipo}")
        print(f"   Status: {orcamento.status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o de modelos: {e}")
        return False

def test_services():
    """Testa servi√ßos"""
    print("\n‚öôÔ∏è Testando services...")
    
    try:
        from app.services.orcamento_service import OrcamentoService
        
        # Instancia service
        service = OrcamentoService()
        print("‚úÖ OrcamentoService instanciado")
        
        # Verifica m√©todos
        methods = [
            'criar_orcamento',
            'buscar_orcamento', 
            'listar_orcamentos',
            'atualizar_orcamento'
        ]
        
        for method in methods:
            if hasattr(service, method):
                print(f"‚úÖ M√©todo {method} presente")
            else:
                print(f"‚ùå M√©todo {method} faltando")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos services: {e}")
        return False

def test_api_structure():
    """Testa estrutura das APIs"""
    print("\nüåê Testando estrutura das APIs...")
    
    try:
        from fastapi import APIRouter
        from app.api.endpoints.orcamentos import router as orcamento_router
        
        if isinstance(orcamento_router, APIRouter):
            routes_count = len(orcamento_router.routes)
            print(f"‚úÖ API de or√ßamentos: {routes_count} rotas")
        else:
            print("‚ùå Router de or√ßamentos inv√°lido")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na estrutura de APIs: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üéØ TESTE R√ÅPIDO DO BACKEND TECHZE")
    print("=" * 50)
    
    tests = [
        ("Imports", test_imports),
        ("Modelos", test_models),
        ("Services", test_services),
        ("APIs", test_api_structure),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"üí• Erro inesperado em {test_name}: {e}")
            results.append((test_name, False))
    
    # Relat√≥rio final
    print("\nüìä RELAT√ìRIO FINAL")
    print("=" * 50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ Resultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("üöÄ Backend pronto para pr√≥xima fase")
        return True
    else:
        print("‚ö†Ô∏è Alguns testes falharam")
        print("üîß Revise os erros acima")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 