#!/usr/bin/env python3
"""
Script de teste para verificar se o setup de seguran√ßa est√° funcionando
"""
import sys
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    logger.info("üß™ Testando imports...")
    
    try:
        # Testa configura√ß√£o
        from app.core.config import settings
        logger.info("‚úÖ Config importado com sucesso")
        
        # Testa m√≥dulos de seguran√ßa
        from app.core.rate_limiter import AdvancedRateLimiter, setup_rate_limiting
        logger.info("‚úÖ Rate limiter importado com sucesso")
        
        from app.core.monitoring import TechZeMetrics, setup_monitoring
        logger.info("‚úÖ Monitoring importado com sucesso")
        
        from app.core.error_tracking import ErrorTracker, setup_error_tracking
        logger.info("‚úÖ Error tracking importado com sucesso")
        
        from app.core.audit import AuditService, AuditEventType
        logger.info("‚úÖ Audit importado com sucesso")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar m√≥dulos: {e}")
        return False


def test_main_app():
    """Testa se a aplica√ß√£o principal pode ser inicializada"""
    logger.info("üß™ Testando aplica√ß√£o principal...")
    
    try:
        from app.main import app
        logger.info("‚úÖ Aplica√ß√£o FastAPI criada com sucesso")
        
        # Verifica se as rotas b√°sicas existem
        routes = [route.path for route in app.routes]
        expected_routes = ["/", "/health", "/info", "/api/v1/diagnostic/quick"]
        
        for route in expected_routes:
            if route in routes:
                logger.info(f"‚úÖ Rota {route} encontrada")
            else:
                logger.warning(f"‚ö†Ô∏è Rota {route} n√£o encontrada")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar aplica√ß√£o: {e}")
        return False


def test_security_modules():
    """Testa se os m√≥dulos de seguran√ßa funcionam"""
    logger.info("üß™ Testando m√≥dulos de seguran√ßa...")
    
    try:
        # Testa rate limiter
        from app.core.rate_limiter import AdvancedRateLimiter
        rate_limiter = AdvancedRateLimiter()
        logger.info("‚úÖ Rate limiter inicializado")
        
        # Testa m√©tricas
        from app.core.monitoring import TechZeMetrics
        metrics = TechZeMetrics()
        logger.info("‚úÖ M√©tricas inicializadas")
        
        # Testa error tracker
        from app.core.error_tracking import ErrorTracker
        error_tracker = ErrorTracker()
        logger.info("‚úÖ Error tracker inicializado")
        
        # Testa audit service
        from app.core.audit import AuditService
        audit_service = AuditService()
        logger.info("‚úÖ Audit service inicializado")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar m√≥dulos de seguran√ßa: {e}")
        return False


def test_configuration():
    """Testa se as configura√ß√µes est√£o corretas"""
    logger.info("üß™ Testando configura√ß√µes...")
    
    try:
        from app.core.config import settings
        
        # Verifica configura√ß√µes b√°sicas
        assert settings.PROJECT_NAME, "PROJECT_NAME n√£o configurado"
        assert settings.VERSION, "VERSION n√£o configurado"
        assert settings.API_V1_STR, "API_V1_STR n√£o configurado"
        
        logger.info(f"‚úÖ Projeto: {settings.PROJECT_NAME}")
        logger.info(f"‚úÖ Vers√£o: {settings.VERSION}")
        logger.info(f"‚úÖ API Prefix: {settings.API_V1_STR}")
        logger.info(f"‚úÖ Ambiente: {settings.ENVIRONMENT}")
        logger.info(f"‚úÖ Debug: {settings.DEBUG}")
        logger.info(f"‚úÖ Host: {settings.HOST}")
        logger.info(f"‚úÖ Port: {settings.PORT}")
        
        # Verifica configura√ß√µes de seguran√ßa
        logger.info(f"‚úÖ Rate Limiting: {settings.RATE_LIMIT_ENABLED}")
        logger.info(f"‚úÖ Prometheus: {settings.PROMETHEUS_ENABLED}")
        logger.info(f"‚úÖ Redis URL: {'Configurado' if settings.REDIS_URL else 'N√£o configurado'}")
        logger.info(f"‚úÖ Sentry DSN: {'Configurado' if settings.SENTRY_DSN else 'N√£o configurado'}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar configura√ß√µes: {e}")
        return False


def main():
    """Fun√ß√£o principal de teste"""
    logger.info("üöÄ Iniciando testes de seguran√ßa...")
    
    tests = [
        ("Imports", test_imports),
        ("Configura√ß√£o", test_configuration),
        ("M√≥dulos de Seguran√ßa", test_security_modules),
        ("Aplica√ß√£o Principal", test_main_app),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ Executando: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = test_func()
            results.append((test_name, result))
            
            if result:
                logger.info(f"‚úÖ {test_name}: PASSOU")
            else:
                logger.error(f"‚ùå {test_name}: FALHOU")
                
        except Exception as e:
            logger.error(f"‚ùå {test_name}: ERRO - {e}")
            results.append((test_name, False))
    
    # Relat√≥rio final
    logger.info(f"\n{'='*50}")
    logger.info("üìä RELAT√ìRIO FINAL")
    logger.info(f"{'='*50}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        logger.info(f"{test_name}: {status}")
    
    logger.info(f"\nüìà Resultado: {passed}/{total} testes passaram")
    
    if passed == total:
        logger.info("üéâ Todos os testes passaram! Sistema pronto para uso.")
        return True
    else:
        logger.error("‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)