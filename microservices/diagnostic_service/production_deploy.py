#!/usr/bin/env python3
"""
Script de Deploy e Valida√ß√£o para Produ√ß√£o - TechZe Diagnostic Service

Executa todas as verifica√ß√µes necess√°rias antes de colocar o sistema em produ√ß√£o.
"""

import os
import sys
import time
import asyncio
import subprocess
import requests
import psutil
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum

class TestResult(Enum):
    PASS = "‚úÖ"
    FAIL = "‚ùå"
    WARNING = "‚ö†Ô∏è"
    SKIP = "‚è≠Ô∏è"

@dataclass
class DeployCheck:
    name: str
    result: TestResult
    message: str
    duration: float
    details: Optional[Dict[str, Any]] = None

class ProductionDeployValidator:
    """Validador para deploy em produ√ß√£o"""
    
    def __init__(self):
        self.results: List[DeployCheck] = []
        self.start_time = time.time()
    
    def run_all_checks(self) -> bool:
        """Executa todas as valida√ß√µes de deploy"""
        print("üöÄ INICIANDO VALIDA√á√ÉO PARA PRODU√á√ÉO - TECHZE DIAGNOSTIC SERVICE")
        print("=" * 70)
        
        checks = [
            ("Configura√ß√£o do Ambiente", self.check_environment),
            ("Depend√™ncias Python", self.check_dependencies),
            ("Estrutura da API", self.check_api_structure),
            ("Testes de Integra√ß√£o", self.check_integration_tests),
            ("Recursos do Sistema", self.check_system_resources),
            ("Seguran√ßa", self.check_security),
            ("Performance", self.check_performance),
            ("Health Checks", self.check_health_endpoints),
            ("Docker/Containers", self.check_docker),
            ("Logs e Monitoramento", self.check_monitoring)
        ]
        
        for check_name, check_func in checks:
            self.run_check(check_name, check_func)
        
        return self.generate_report()
    
    def run_check(self, name: str, check_func):
        """Executa uma verifica√ß√£o espec√≠fica"""
        print(f"\nüìã {name}...")
        start_time = time.time()
        
        try:
            result, message, details = check_func()
            duration = time.time() - start_time
            
            check = DeployCheck(
                name=name,
                result=result,
                message=message,
                duration=duration,
                details=details
            )
            
            self.results.append(check)
            print(f"   {result.value} {message} ({duration:.2f}s)")
            
            if details and result != TestResult.PASS:
                for key, value in details.items():
                    print(f"      ‚Ä¢ {key}: {value}")
                    
        except Exception as e:
            duration = time.time() - start_time
            check = DeployCheck(
                name=name,
                result=TestResult.FAIL,
                message=f"Erro na verifica√ß√£o: {e}",
                duration=duration
            )
            self.results.append(check)
            print(f"   ‚ùå Erro na verifica√ß√£o: {e}")
    
    def check_environment(self) -> tuple:
        """Verifica configura√ß√µes de ambiente"""
        issues = []
        
        # Verificar vari√°veis cr√≠ticas
        required_vars = ["ENVIRONMENT", "JWT_SECRET_KEY", "DATABASE_URL"]
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            issues.append(f"Vari√°veis ausentes: {', '.join(missing_vars)}")
        
        # Verificar modo de produ√ß√£o
        if os.getenv("DEBUG", "false").lower() == "true":
            issues.append("DEBUG=true em produ√ß√£o")
        
        if os.getenv("ENVIRONMENT") != "production":
            issues.append("ENVIRONMENT n√£o √© 'production'")
        
        if issues:
            return TestResult.FAIL, f"Problemas de configura√ß√£o: {'; '.join(issues)}", {"issues": issues}
        
        return TestResult.PASS, "Configura√ß√£o de ambiente OK", None
    
    def check_dependencies(self) -> tuple:
        """Verifica depend√™ncias Python"""
        try:
            # Verificar imports cr√≠ticos
            critical_imports = [
                "fastapi", "uvicorn", "sqlalchemy", "psycopg2", 
                "redis", "jwt", "passlib", "psutil"
            ]
            
            missing = []
            for package in critical_imports:
                try:
                    __import__(package)
                except ImportError:
                    missing.append(package)
            
            if missing:
                return TestResult.FAIL, f"Depend√™ncias ausentes: {', '.join(missing)}", {"missing": missing}
            
            return TestResult.PASS, "Todas as depend√™ncias OK", None
            
        except Exception as e:
            return TestResult.FAIL, f"Erro ao verificar depend√™ncias: {e}", None
    
    def check_api_structure(self) -> tuple:
        """Verifica estrutura da API"""
        try:
            # Verificar arquivos cr√≠ticos
            critical_files = [
                "app/main.py",
                "app/api/core/router.py",
                "app/api/core/auth/endpoints.py",
                "app/api/core/diagnostics/endpoints.py"
            ]
            
            missing_files = []
            for file_path in critical_files:
                if not os.path.exists(file_path):
                    missing_files.append(file_path)
            
            if missing_files:
                return TestResult.FAIL, f"Arquivos ausentes: {', '.join(missing_files)}", {"missing": missing_files}
            
            return TestResult.PASS, "Estrutura da API completa", None
            
        except Exception as e:
            return TestResult.FAIL, f"Erro ao verificar estrutura: {e}", None
    
    def check_integration_tests(self) -> tuple:
        """Executa testes de integra√ß√£o"""
        try:
            # Executar testes
            result = subprocess.run(
                [sys.executable, "-m", "pytest", "tests/test_integration_core.py", "-v"],
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                return TestResult.PASS, "Todos os testes passaram", {"stdout": result.stdout}
            else:
                return TestResult.FAIL, "Testes falharam", {"stderr": result.stderr}
                
        except subprocess.TimeoutExpired:
            return TestResult.FAIL, "Timeout nos testes", None
        except Exception as e:
            return TestResult.WARNING, f"N√£o foi poss√≠vel executar testes: {e}", None
    
    def check_system_resources(self) -> tuple:
        """Verifica recursos do sistema"""
        try:
            issues = []
            
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            if cpu_percent > 80:
                issues.append(f"CPU alta: {cpu_percent}%")
            
            # Mem√≥ria
            memory = psutil.virtual_memory()
            if memory.percent > 80:
                issues.append(f"Mem√≥ria alta: {memory.percent}%")
            
            # Disco
            disk = psutil.disk_usage('/')
            disk_percent = (disk.used / disk.total) * 100
            if disk_percent > 85:
                issues.append(f"Disco cheio: {disk_percent:.1f}%")
            
            if issues:
                return TestResult.WARNING, f"Recursos limitados: {'; '.join(issues)}", {
                    "cpu_percent": cpu_percent,
                    "memory_percent": memory.percent,
                    "disk_percent": disk_percent
                }
            
            return TestResult.PASS, "Recursos suficientes", {
                "cpu_percent": cpu_percent,
                "memory_percent": memory.percent,
                "disk_percent": disk_percent
            }
            
        except Exception as e:
            return TestResult.WARNING, f"N√£o foi poss√≠vel verificar recursos: {e}", None
    
    def check_security(self) -> tuple:
        """Verifica configura√ß√µes de seguran√ßa"""
        issues = []
        
        # JWT Secret
        jwt_secret = os.getenv("JWT_SECRET_KEY", "")
        if len(jwt_secret) < 32:
            issues.append("JWT secret muito curto")
        
        if jwt_secret == "dev-secret-key-change-in-production":
            issues.append("JWT secret ainda √© o padr√£o de desenvolvimento")
        
        # Debug mode
        if os.getenv("DEBUG", "false").lower() == "true":
            issues.append("DEBUG habilitado em produ√ß√£o")
        
        if issues:
            return TestResult.FAIL, f"Problemas de seguran√ßa: {'; '.join(issues)}", {"issues": issues}
        
        return TestResult.PASS, "Configura√ß√µes de seguran√ßa OK", None
    
    def check_performance(self) -> tuple:
        """Testa performance b√°sica"""
        try:
            # Simular carga b√°sica
            start_time = time.time()
            
            # Teste simples de import da aplica√ß√£o
            from app.main import app
            
            load_time = time.time() - start_time
            
            if load_time > 5.0:
                return TestResult.WARNING, f"Carregamento lento: {load_time:.2f}s", {"load_time": load_time}
            
            return TestResult.PASS, f"Performance adequada: {load_time:.2f}s", {"load_time": load_time}
            
        except Exception as e:
            return TestResult.FAIL, f"Erro no teste de performance: {e}", None
    
    def check_health_endpoints(self) -> tuple:
        """Verifica endpoints de health check"""
        try:
            from fastapi.testclient import TestClient
            from app.main import app
            
            client = TestClient(app)
            
            # Testar endpoints cr√≠ticos
            endpoints = [
                "/api/core/diagnostics/health",
                "/api/core/diagnostics/info",
                "/api/core/auth/health"
            ]
            
            failed_endpoints = []
            for endpoint in endpoints:
                response = client.get(endpoint)
                if response.status_code != 200:
                    failed_endpoints.append(f"{endpoint} ({response.status_code})")
            
            if failed_endpoints:
                return TestResult.FAIL, f"Endpoints falhando: {', '.join(failed_endpoints)}", {"failed": failed_endpoints}
            
            return TestResult.PASS, "Todos os health checks OK", None
            
        except Exception as e:
            return TestResult.FAIL, f"Erro ao testar endpoints: {e}", None
    
    def check_docker(self) -> tuple:
        """Verifica configura√ß√£o Docker"""
        try:
            docker_files = ["Dockerfile", "docker-compose.yml"]
            missing = [f for f in docker_files if not os.path.exists(f)]
            
            if missing:
                return TestResult.WARNING, f"Arquivos Docker ausentes: {', '.join(missing)}", {"missing": missing}
            
            return TestResult.PASS, "Configura√ß√£o Docker presente", None
            
        except Exception as e:
            return TestResult.WARNING, f"N√£o foi poss√≠vel verificar Docker: {e}", None
    
    def check_monitoring(self) -> tuple:
        """Verifica configura√ß√£o de logs e monitoramento"""
        try:
            log_issues = []
            
            # Verificar configura√ß√£o de logging
            log_level = os.getenv("LOG_LEVEL", "INFO")
            if log_level == "DEBUG":
                log_issues.append("LOG_LEVEL=DEBUG em produ√ß√£o")
            
            # Verificar se Sentry est√° configurado
            if not os.getenv("SENTRY_DSN"):
                log_issues.append("SENTRY_DSN n√£o configurado")
            
            if log_issues:
                return TestResult.WARNING, f"Problemas de monitoramento: {'; '.join(log_issues)}", {"issues": log_issues}
            
            return TestResult.PASS, "Configura√ß√£o de monitoramento OK", None
            
        except Exception as e:
            return TestResult.WARNING, f"Erro ao verificar monitoramento: {e}", None
    
    def generate_report(self) -> bool:
        """Gera relat√≥rio final"""
        total_time = time.time() - self.start_time
        
        passed = sum(1 for r in self.results if r.result == TestResult.PASS)
        failed = sum(1 for r in self.results if r.result == TestResult.FAIL)
        warnings = sum(1 for r in self.results if r.result == TestResult.WARNING)
        total = len(self.results)
        
        print("\n" + "=" * 70)
        print("üìä RELAT√ìRIO FINAL DE VALIDA√á√ÉO")
        print("=" * 70)
        
        print(f"‚è±Ô∏è  Tempo total: {total_time:.2f}s")
        print(f"üìã Total de verifica√ß√µes: {total}")
        print(f"‚úÖ Passaram: {passed}")
        print(f"‚ö†Ô∏è  Avisos: {warnings}")
        print(f"‚ùå Falharam: {failed}")
        
        # Resumo por categoria
        if failed > 0:
            print("\n‚ùå VERIFICA√á√ïES QUE FALHARAM:")
            for result in self.results:
                if result.result == TestResult.FAIL:
                    print(f"   ‚Ä¢ {result.name}: {result.message}")
        
        if warnings > 0:
            print("\n‚ö†Ô∏è  AVISOS:")
            for result in self.results:
                if result.result == TestResult.WARNING:
                    print(f"   ‚Ä¢ {result.name}: {result.message}")
        
        # Decis√£o final
        print("\n" + "=" * 70)
        if failed == 0:
            if warnings == 0:
                print("üéâ SISTEMA PRONTO PARA PRODU√á√ÉO!")
                print("‚úÖ Todas as verifica√ß√µes passaram com sucesso.")
                return True
            else:
                print("‚úÖ SISTEMA APROVADO PARA PRODU√á√ÉO COM AVISOS")
                print("‚ö†Ô∏è  Alguns avisos foram encontrados, mas n√£o impedem o deploy.")
                return True
        else:
            print("‚ùå SISTEMA N√ÉO PRONTO PARA PRODU√á√ÉO")
            print("üîß Corrija os problemas encontrados antes do deploy.")
            return False

def main():
    """Fun√ß√£o principal"""
    validator = ProductionDeployValidator()
    success = validator.run_all_checks()
    
    if success:
        print("\nüöÄ Execute o deploy com:")
        print("   docker-compose -f docker-compose.prod.yml up -d")
        sys.exit(0)
    else:
        print("\nüõ†Ô∏è  Corrija os problemas e execute novamente:")
        print("   python production_deploy.py")
        sys.exit(1)

if __name__ == "__main__":
    main() 