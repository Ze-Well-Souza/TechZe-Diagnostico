#!/usr/bin/env python3
"""
Script para executar todos os testes do TechZe Diagn√≥stico
Inclui testes unit√°rios, de integra√ß√£o e de cobertura
"""

import subprocess
import sys
import os
from pathlib import Path
import argparse

# Adiciona o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent.parent))


def run_command(command, description):
    """Executa um comando e retorna o resultado"""
    print(f"\nüîÑ {description}")
    print(f"Executando: {' '.join(command)}")
    
    try:
        result = subprocess.run(
            command, 
            capture_output=True, 
            text=True, 
            cwd=Path(__file__).parent.parent
        )
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - Sucesso")
            if result.stdout:
                print(result.stdout)
        else:
            print(f"‚ùå {description} - Falha")
            if result.stderr:
                print("STDERR:", result.stderr)
            if result.stdout:
                print("STDOUT:", result.stdout)
            
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå Erro ao executar {description}: {e}")
        return False


def install_dependencies():
    """Instala depend√™ncias de teste"""
    print("üì¶ Verificando depend√™ncias de teste...")
    
    dependencies = [
        "pytest",
        "pytest-asyncio", 
        "pytest-cov",
        "pytest-mock",
        "pytest-xdist"  # Para execu√ß√£o paralela
    ]
    
    for dep in dependencies:
        success = run_command(
            ["pip", "install", dep],
            f"Instalando {dep}"
        )
        if not success:
            print(f"‚ö†Ô∏è Falha ao instalar {dep}, continuando...")


def run_unit_tests(coverage=False, verbose=False):
    """Executa testes unit√°rios"""
    command = ["python", "-m", "pytest", "tests/"]
    
    if coverage:
        command.extend([
            "--cov=app",
            "--cov-report=html:htmlcov",
            "--cov-report=term-missing",
            "--cov-report=xml"
        ])
    
    if verbose:
        command.append("-v")
    
    # Adiciona marcadores para excluir testes de integra√ß√£o por padr√£o
    command.extend(["-m", "not integration"])
    
    return run_command(command, "Executando testes unit√°rios")


def run_integration_tests(verbose=False):
    """Executa testes de integra√ß√£o"""
    command = ["python", "-m", "pytest", "tests/", "-m", "integration"]
    
    if verbose:
        command.append("-v")
    
    return run_command(command, "Executando testes de integra√ß√£o")


def run_linting():
    """Executa verifica√ß√µes de estilo de c√≥digo"""
    commands = [
        (["flake8", "app/", "tests/"], "Verifica√ß√£o Flake8"),
        (["black", "--check", "app/", "tests/"], "Verifica√ß√£o Black"),
        (["isort", "--check-only", "app/", "tests/"], "Verifica√ß√£o isort")
    ]
    
    results = []
    for command, description in commands:
        try:
            result = run_command(command, description)
            results.append(result)
        except Exception:
            print(f"‚ö†Ô∏è {description} n√£o dispon√≠vel, instalando...")
            # Tenta instalar a ferramenta
            tool_name = command[0]
            subprocess.run(["pip", "install", tool_name], capture_output=True)
            result = run_command(command, description)
            results.append(result)
    
    return all(results)


def run_security_checks():
    """Executa verifica√ß√µes de seguran√ßa"""
    commands = [
        (["safety", "check"], "Verifica√ß√£o de seguran√ßa (Safety)"),
        (["bandit", "-r", "app/"], "Verifica√ß√£o de vulnerabilidades (Bandit)")
    ]
    
    results = []
    for command, description in commands:
        try:
            result = run_command(command, description)
            results.append(result)
        except Exception:
            print(f"‚ö†Ô∏è {description} n√£o dispon√≠vel")
            results.append(True)  # N√£o falha se n√£o estiver dispon√≠vel
    
    return all(results)


def generate_coverage_report():
    """Gera relat√≥rio de cobertura detalhado"""
    print("\nüìä Gerando relat√≥rio de cobertura...")
    
    # Verifica se existe arquivo de cobertura
    coverage_file = Path("htmlcov/index.html")
    if coverage_file.exists():
        print(f"‚úÖ Relat√≥rio de cobertura dispon√≠vel em: {coverage_file.absolute()}")
        print("üåê Abra o arquivo no navegador para visualizar o relat√≥rio detalhado")
    else:
        print("‚ö†Ô∏è Arquivo de cobertura n√£o encontrado. Execute os testes com --coverage primeiro.")


def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description="Executa testes do TechZe Diagn√≥stico")
    parser.add_argument("--coverage", action="store_true", help="Gera relat√≥rio de cobertura")
    parser.add_argument("--integration", action="store_true", help="Executa testes de integra√ß√£o")
    parser.add_argument("--lint", action="store_true", help="Executa verifica√ß√µes de linting")
    parser.add_argument("--security", action="store_true", help="Executa verifica√ß√µes de seguran√ßa")
    parser.add_argument("--all", action="store_true", help="Executa todos os tipos de teste")
    parser.add_argument("--verbose", "-v", action="store_true", help="Sa√≠da verbosa")
    parser.add_argument("--install-deps", action="store_true", help="Instala depend√™ncias de teste")
    
    args = parser.parse_args()
    
    print("üß™ TechZe Diagn√≥stico - Execu√ß√£o de Testes")
    print("=" * 50)
    
    # Instala depend√™ncias se solicitado
    if args.install_deps or args.all:
        install_dependencies()
    
    results = []
    
    # Executa testes unit√°rios (sempre executado)
    success = run_unit_tests(coverage=args.coverage or args.all, verbose=args.verbose)
    results.append(("Testes Unit√°rios", success))
    
    # Executa testes de integra√ß√£o se solicitado
    if args.integration or args.all:
        success = run_integration_tests(verbose=args.verbose)
        results.append(("Testes de Integra√ß√£o", success))
    
    # Executa linting se solicitado
    if args.lint or args.all:
        success = run_linting()
        results.append(("Verifica√ß√µes de Linting", success))
    
    # Executa verifica√ß√µes de seguran√ßa se solicitado
    if args.security or args.all:
        success = run_security_checks()
        results.append(("Verifica√ß√µes de Seguran√ßa", success))
    
    # Gera relat√≥rio de cobertura se solicitado
    if args.coverage or args.all:
        generate_coverage_report()
    
    # Resumo final
    print("\n" + "=" * 50)
    print("üìã RESUMO DOS TESTES")
    print("=" * 50)
    
    all_passed = True
    for test_type, passed in results:
        status = "‚úÖ PASSOU" if passed else "‚ùå FALHOU"
        print(f"{test_type}: {status}")
        if not passed:
            all_passed = False
    
    if all_passed:
        print("\nüéâ Todos os testes passaram com sucesso!")
        exit_code = 0
    else:
        print("\nüí• Alguns testes falharam. Verifique os logs acima.")
        exit_code = 1
    
    print("\nüéØ PR√ìXIMOS PASSOS:")
    if not args.coverage:
        print("   - Execute com --coverage para ver cobertura de c√≥digo")
    if not args.integration:
        print("   - Execute com --integration para testes de integra√ß√£o")
    if not args.lint:
        print("   - Execute com --lint para verifica√ß√µes de qualidade")
    
    print(f"\nüèÅ Execu√ß√£o finalizada com c√≥digo: {exit_code}")
    sys.exit(exit_code)


if __name__ == "__main__":
    main() 