"""
TechZe Diagnostic Service - Main Application
API Consolidada com organiza√ß√£o por dom√≠nios funcionais
"""

from fastapi import FastAPI, HTTPException, status, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import uvicorn
import logging
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# Imports da aplica√ß√£o
from app.core.config import settings

# Imports do connection pooling avan√ßado
try:
    from app.core.advanced_pool import AdvancedConnectionPool, initialize_advanced_pool, get_advanced_pool
    ADVANCED_POOL_AVAILABLE = True
except ImportError as e:
    logger.warning(f"Advanced pool modules not available: {e}")
    ADVANCED_POOL_AVAILABLE = False

# Imports dos m√≥dulos de seguran√ßa e monitoramento
try:
    from app.core.rate_limiter import setup_rate_limiting
    from app.core.monitoring import setup_monitoring
    from app.core.error_tracking import setup_error_tracking
    SECURITY_MODULES_AVAILABLE = True
except ImportError as e:
    logger.warning(f"Security modules not available: {e}")
    SECURITY_MODULES_AVAILABLE = False

# Import da API Core (Consolidada) - PRIORIDADE
try:
    from app.api.core.router import api_router as core_api_router
    API_CORE_ROUTER_AVAILABLE = True
    logger.info("‚úÖ API Core router imported successfully")
except ImportError as e:
    logger.error(f"‚ùå API Core router not available: {e}")
    API_CORE_ROUTER_AVAILABLE = False

# Import dos analisadores
try:
    from app.services.analyzers import CPUAnalyzer, MemoryAnalyzer, DiskAnalyzer, NetworkAnalyzer
    ANALYZERS_AVAILABLE = True
except ImportError as e:
    logger.warning(f"Analyzers not available: {e}")
    ANALYZERS_AVAILABLE = False

# ==========================================
# CONFIGURA√á√ÉO DO CICLO DE VIDA
# ==========================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    # Startup
    logger.info("üöÄ Iniciando TechZe Diagnostic Service - API Consolidada...")
    
    # Inicializar connection pooling avan√ßado
    if ADVANCED_POOL_AVAILABLE:
        try:
            db_nodes = [
                {
                    "id": "primary",
                    "host": getattr(settings, 'DATABASE_HOST', 'localhost'),
                    "port": getattr(settings, 'DATABASE_PORT', 5432),
                    "database": getattr(settings, 'DATABASE_NAME', 'techze_db'),
                    "user": getattr(settings, 'DATABASE_USER', 'postgres'),
                    "password": getattr(settings, 'DATABASE_PASSWORD', ''),
                    "weight": 1.0,
                    "is_primary": True
                }
            ]
            
            pool_config = {
                "nodes": db_nodes,
                "strategy": "least_connections",
                "max_connections_per_node": getattr(settings, 'DATABASE_MAX_CONNECTIONS', 20),
                "min_connections_per_node": getattr(settings, 'DATABASE_MIN_CONNECTIONS', 5),
                "connection_timeout": 30,
                "retry_attempts": 3,
                "circuit_breaker_threshold": 5,
                "circuit_breaker_timeout": 60,
                "enable_metrics": True
            }
            
            await initialize_advanced_pool(pool_config)
            logger.info("‚úÖ Connection pooling inicializado")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar connection pooling: {e}")
    
    yield
    
    # Shutdown
    logger.info("üõë Encerrando TechZe Diagnostic Service...")
    
    if ADVANCED_POOL_AVAILABLE:
        try:
            pool = await get_advanced_pool()
            if pool:
                await pool.close_all()
                logger.info("‚úÖ Connection pooling encerrado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao encerrar connection pooling: {e}")

# ==========================================
# CONFIGURA√á√ÉO DA APLICA√á√ÉO FASTAPI
# ==========================================

app = FastAPI(
    title=settings.PROJECT_NAME,
    description="API para diagn√≥stico completo de hardware e software - Vers√£o Consolidada",
    version=settings.VERSION,
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
    lifespan=lifespan
)

# Configura√ß√£o de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configura√ß√£o de seguran√ßa e monitoramento
if SECURITY_MODULES_AVAILABLE:
    if getattr(settings, 'RATE_LIMIT_ENABLED', True):
        try:
            setup_rate_limiting(app, getattr(settings, 'REDIS_URL', None))
            logger.info("‚úÖ Rate limiting configurado")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao configurar rate limiting: {e}")

    if getattr(settings, 'PROMETHEUS_ENABLED', True):
        try:
            setup_monitoring(app)
            logger.info("‚úÖ Monitoramento Prometheus configurado")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao configurar monitoramento: {e}")

    if getattr(settings, 'SENTRY_DSN', None):
        try:
            setup_error_tracking(app, settings.SENTRY_DSN)
            logger.info("‚úÖ Error tracking Sentry configurado")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao configurar error tracking: {e}")

# ==========================================
# INCLUIR ROUTERS - API CORE CONSOLIDADA
# ==========================================

if API_CORE_ROUTER_AVAILABLE:
    app.include_router(core_api_router)
    logger.info("‚úÖ API Core routes loaded - Consolidated API available at /api/core/*")
else:
    logger.error("‚ùå API Core routes not loaded - service will have limited functionality")

# ==========================================
# ENDPOINTS B√ÅSICOS DO SISTEMA
# ==========================================

@app.get("/", tags=["Root"])
async def root():
    """Rota raiz do servi√ßo de diagn√≥stico."""
    return {
        "service": "TechZe Diagnostic Service",
        "version": settings.VERSION,
        "status": "running",
        "api_consolidation": {
            "status": "active",
            "core_api": "/api/core" if API_CORE_ROUTER_AVAILABLE else "unavailable"
        },
        "environment": settings.ENVIRONMENT,
        "docs": "/docs" if settings.DEBUG else "disabled",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health", tags=["Health"])
async def health_check():
    """Verifica√ß√£o de sa√∫de do servi√ßo."""
    return {
        "status": "healthy",
        "service": "diagnostic-service-consolidated",
        "version": settings.VERSION,
        "timestamp": datetime.now().isoformat(),
        "environment": settings.ENVIRONMENT,
        "api_status": {
            "core_api": "available" if API_CORE_ROUTER_AVAILABLE else "unavailable"
        },
        "modules": {
            "security": SECURITY_MODULES_AVAILABLE,
            "advanced_pool": ADVANCED_POOL_AVAILABLE,
            "analyzers": ANALYZERS_AVAILABLE
        }
    }

@app.get("/info", tags=["Info"])
async def service_info():
    """Informa√ß√µes detalhadas do servi√ßo."""
    return {
        "project_name": settings.PROJECT_NAME,
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "debug_mode": settings.DEBUG,
        "api_consolidation": {
            "status": "completed",
            "core_api_available": API_CORE_ROUTER_AVAILABLE,
            "core_api_endpoint": "/api/core" if API_CORE_ROUTER_AVAILABLE else None,
            "domains": [
                "auth",
                "diagnostics", 
                "ai",
                "automation",
                "analytics",
                "performance",
                "chat",
                "integration"
            ] if API_CORE_ROUTER_AVAILABLE else []
        },
        "features": {
            "security_modules": SECURITY_MODULES_AVAILABLE,
            "advanced_pool": ADVANCED_POOL_AVAILABLE,
            "analyzers": ANALYZERS_AVAILABLE,
            "supabase": bool(getattr(settings, 'SUPABASE_URL', None)),
            "docs": settings.DEBUG
        }
    }

# ==========================================
# ENDPOINTS DE MONITORAMENTO (LEGACY)
# ==========================================

# Mantidos para compatibilidade com sistemas de monitoramento existentes
if ADVANCED_POOL_AVAILABLE:
    @app.get("/api/v3/pool/metrics", tags=["Legacy Monitoring"])
    async def get_pool_metrics():
        """Retorna m√©tricas do connection pool (Legacy)"""
        try:
            pool = await get_advanced_pool()
            if not pool:
                raise HTTPException(status_code=503, detail="Pool n√£o inicializado")
            
            metrics = await pool.get_metrics()
            return {
                "status": "success",
                "metrics": metrics,
                "timestamp": datetime.utcnow().isoformat(),
                "note": "This is a legacy endpoint. Use /api/core/performance/stats instead."
            }
        except Exception as e:
            logger.error(f"Erro ao obter m√©tricas do pool: {e}")
            raise HTTPException(status_code=500, detail=str(e))
    
    @app.get("/api/v3/pool/health", tags=["Legacy Monitoring"])
    async def get_pool_health():
        """Retorna status de sa√∫de do connection pool (Legacy)"""
        try:
            pool = await get_advanced_pool()
            if not pool:
                raise HTTPException(status_code=503, detail="Pool n√£o inicializado")
            
            health_status = await pool.health_check()
            return {
                "status": "healthy" if health_status["healthy"] else "unhealthy",
                "details": health_status,
                "timestamp": datetime.utcnow().isoformat(),
                "note": "This is a legacy endpoint. Use /api/core/performance/health instead."
            }
        except Exception as e:
            logger.error(f"Erro ao verificar sa√∫de do pool: {e}")
            raise HTTPException(status_code=500, detail=str(e))
    
    @app.get("/api/v3/pool/stats", tags=["Legacy Monitoring"])
    async def get_pool_stats():
        """Retorna estat√≠sticas detalhadas do pool (Legacy)"""
        try:
            pool = await get_advanced_pool()
            if not pool:
                raise HTTPException(status_code=503, detail="Pool n√£o inicializado")
            
            stats = await pool.get_detailed_stats()
            return {
                "status": "success",
                "stats": stats,
                "timestamp": datetime.utcnow().isoformat(),
                "note": "This is a legacy endpoint. Use /api/core/performance/stats instead."
            }
        except Exception as e:
            logger.error(f"Erro ao obter estat√≠sticas do pool: {e}")
            raise HTTPException(status_code=500, detail=str(e))

# ==========================================
# TRATAMENTO DE ERROS GLOBAL
# ==========================================

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Handler para exce√ß√µes HTTP"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "detail": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.utcnow().isoformat(),
            "path": str(request.url),
            "service": "diagnostic-service-consolidated"
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Handler para exce√ß√µes gerais"""
    logger.error(f"Erro n√£o tratado: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Erro interno do servidor",
            "status_code": 500,
            "timestamp": datetime.utcnow().isoformat(),
            "path": str(request.url),
            "service": "diagnostic-service-consolidated"
        }
    )

# ==========================================
# SERVIDOR UVICORN
# ==========================================

if __name__ == "__main__":
    uvicorn.run(
        "main:app", 
        host=settings.HOST, 
        port=settings.PORT, 
        reload=settings.DEBUG,
        log_level=getattr(settings, 'LOG_LEVEL', 'info').lower()
    ) 