# TechZe Diagnóstico API Core - Docker Compose
# Orquestração completa dos serviços

version: '3.8'

services:
  # ================================
  # API Core Principal
  # ================================
  api-core:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: techze-api-core
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=techze_diagnostico
      - DB_USER=techze_user
      - DB_PASSWORD=${DB_PASSWORD:-techze_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    networks:
      - techze-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # Banco de Dados PostgreSQL
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: techze-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=techze_diagnostico
      - POSTGRES_USER=techze_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-techze_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - techze-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U techze_user -d techze_diagnostico"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # Cache Redis
  # ================================
  redis:
    image: redis:7-alpine
    container_name: techze-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-techze_redis}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - techze-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ================================
  # Proxy Nginx
  # ================================
  nginx:
    build:
      context: .
      dockerfile: Dockerfile
      target: proxy
    container_name: techze-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-core
    networks:
      - techze-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Monitoramento - Prometheus
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: techze-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - techze-network

  # ================================
  # Visualização - Grafana
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: techze-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - techze-network

  # ================================
  # Logs - Elasticsearch
  # ================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: techze-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - techze-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ================================
  # Logs - Kibana
  # ================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: techze-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - techze-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ================================
  # Filas - RabbitMQ
  # ================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: techze-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-techze}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-techze_rabbit}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - techze-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ================================
  # Worker Celery
  # ================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: techze-celery-worker
    restart: unless-stopped
    command: celery -A main.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    networks:
      - techze-network

  # ================================
  # Scheduler Celery Beat
  # ================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: techze-celery-beat
    restart: unless-stopped
    command: celery -A main.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./logs:/app/logs
    networks:
      - techze-network

  # ================================
  # Backup Service
  # ================================
  backup:
    build:
      context: .
      dockerfile: Dockerfile
      target: backup
    container_name: techze-backup
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_NAME=techze_diagnostico
      - DB_USER=techze_user
      - DB_PASSWORD=${DB_PASSWORD:-techze_password}
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - ./backups:/app/backups
      - postgres_data:/var/lib/postgresql/data:ro
    depends_on:
      - postgres
    networks:
      - techze-network

  # ================================
  # ML Training Service
  # ================================
  ml-trainer:
    build:
      context: .
      dockerfile: Dockerfile
      target: ml
    container_name: techze-ml-trainer
    restart: "no"  # Run on demand
    environment:
      - ENVIRONMENT=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - techze-network

  # ================================
  # Analytics Service
  # ================================
  analytics:
    build:
      context: .
      dockerfile: Dockerfile
      target: analytics
    container_name: techze-analytics
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-techze_analytics}
    volumes:
      - ./analytics:/app/analytics
      - ./data:/app/data:ro
    networks:
      - techze-network

  # ================================
  # Development Environment
  # ================================
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: techze-api-dev
    restart: "no"
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DB_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - techze-network
    profiles:
      - dev

  # ================================
  # Testing Environment
  # ================================
  api-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: techze-api-test
    restart: "no"
    environment:
      - ENVIRONMENT=testing
      - DB_HOST=postgres-test
      - REDIS_HOST=redis-test
    volumes:
      - .:/app
      - ./test-results:/app/test-results
    networks:
      - techze-network
    profiles:
      - test

  # ================================
  # Test Database
  # ================================
  postgres-test:
    image: postgres:15-alpine
    container_name: techze-postgres-test
    restart: "no"
    environment:
      - POSTGRES_DB=techze_diagnostico_test
      - POSTGRES_USER=techze_test
      - POSTGRES_PASSWORD=techze_test
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - techze-network
    profiles:
      - test

  # ================================
  # Test Redis
  # ================================
  redis-test:
    image: redis:7-alpine
    container_name: techze-redis-test
    restart: "no"
    command: redis-server --appendonly no
    networks:
      - techze-network
    profiles:
      - test

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local

# ================================
# Networks
# ================================
networks:
  techze-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Configurações adicionais
# ================================
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Aplicar logging padrão a todos os serviços
services:
  api-core:
    logging: *default-logging
  postgres:
    logging: *default-logging
  redis:
    logging: *default-logging
  nginx:
    logging: *default-logging
  prometheus:
    logging: *default-logging
  grafana:
    logging: *default-logging
  elasticsearch:
    logging: *default-logging
  kibana:
    logging: *default-logging
  rabbitmq:
    logging: *default-logging
  celery-worker:
    logging: *default-logging
  celery-beat:
    logging: *default-logging