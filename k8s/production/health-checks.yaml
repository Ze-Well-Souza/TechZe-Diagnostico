# Health Checks e Monitoring para Kubernetes
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-check-config
  namespace: production
data:
  health-check.sh: |
    #!/bin/bash
    set -e
    
    # Configurações
    API_URL="http://localhost:8000"
    TIMEOUT=10
    MAX_RETRIES=3
    
    # Função para log com timestamp
    log() {
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    }
    
    # Health check básico
    basic_health_check() {
        log "Executando health check básico..."
        
        for i in $(seq 1 $MAX_RETRIES); do
            if curl -f -s --max-time $TIMEOUT "$API_URL/health" > /dev/null; then
                log "✅ Health check básico passou (tentativa $i)"
                return 0
            fi
            
            log "❌ Health check básico falhou (tentativa $i/$MAX_RETRIES)"
            if [ $i -lt $MAX_RETRIES ]; then
                sleep 2
            fi
        done
        
        return 1
    }
    
    # Health check detalhado
    detailed_health_check() {
        log "Executando health check detalhado..."
        
        # Verificar banco de dados
        if ! curl -f -s --max-time $TIMEOUT "$API_URL/health/database" > /dev/null; then
            log "❌ Database health check falhou"
            return 1
        fi
        log "✅ Database health check passou"
        
        # Verificar Redis
        if ! curl -f -s --max-time $TIMEOUT "$API_URL/health/redis" > /dev/null; then
            log "❌ Redis health check falhou"
            return 1
        fi
        log "✅ Redis health check passou"
        
        # Verificar métricas
        if ! curl -f -s --max-time $TIMEOUT "$API_URL/metrics" > /dev/null; then
            log "❌ Metrics endpoint falhou"
            return 1
        fi
        log "✅ Metrics endpoint passou"
        
        return 0
    }
    
    # Executar checks baseado no argumento
    case "${1:-basic}" in
        "basic")
            basic_health_check
            ;;
        "detailed")
            basic_health_check && detailed_health_check
            ;;
        *)
            log "❌ Argumento inválido. Use 'basic' ou 'detailed'"
            exit 1
            ;;
    esac

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: techze-diagnostic-backend
  namespace: production
  labels:
    app: techze-diagnostic
    component: backend
    version: v3.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: techze-diagnostic
      component: backend
  template:
    metadata:
      labels:
        app: techze-diagnostic
        component: backend
        version: v3.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: techze-diagnostic
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      initContainers:
      - name: wait-for-db
        image: postgres:14-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
            echo "Aguardando PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL está pronto!"
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: port
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: username
      
      - name: wait-for-redis
        image: redis:6-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h $REDIS_HOST -p $REDIS_PORT ping; do
            echo "Aguardando Redis..."
            sleep 2
          done
          echo "Redis está pronto!"
        env:
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: host
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: port
      
      containers:
      - name: backend
        image: ghcr.io/techze/diagnostic-service-backend:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: secret-key
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: monitoring-secret
              key: sentry-dsn
        
        # Recursos
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        # Volume mounts
        volumeMounts:
        - name: health-check-script
          mountPath: /app/health-check.sh
          subPath: health-check.sh
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
      
      # Sidecar para health checks avançados
      - name: health-monitor
        image: curlimages/curl:latest
        command:
        - sh
        - -c
        - |
          while true; do
            sleep 60
            /app/health-check.sh detailed || echo "Health check detalhado falhou"
          done
        volumeMounts:
        - name: health-check-script
          mountPath: /app/health-check.sh
          subPath: health-check.sh
          readOnly: true
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
      
      volumes:
      - name: health-check-script
        configMap:
          name: health-check-config
          defaultMode: 0755
      - name: tmp
        emptyDir: {}
      - name: app-logs
        emptyDir: {}
      
      # Configurações de scheduling
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - techze-diagnostic
                - key: component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# Service para health checks externos
apiVersion: v1
kind: Service
metadata:
  name: techze-diagnostic-health
  namespace: production
  labels:
    app: techze-diagnostic
    component: health
spec:
  type: ClusterIP
  ports:
  - name: health
    port: 8080
    targetPort: 8000
    protocol: TCP
  selector:
    app: techze-diagnostic
    component: backend

---
# ServiceMonitor para Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: techze-diagnostic-health
  namespace: production
  labels:
    app: techze-diagnostic
    component: monitoring
spec:
  selector:
    matchLabels:
      app: techze-diagnostic
      component: backend
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true

---
# PrometheusRule para alertas de health
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: techze-diagnostic-health-alerts
  namespace: production
  labels:
    app: techze-diagnostic
    component: monitoring
spec:
  groups:
  - name: techze-diagnostic.health
    rules:
    
    # Alerta para pods não prontos
    - alert: TechZeDiagnosticPodsNotReady
      expr: |
        (
          kube_deployment_status_replicas{deployment="techze-diagnostic-backend", namespace="production"}
          -
          kube_deployment_status_replicas_ready{deployment="techze-diagnostic-backend", namespace="production"}
        ) > 0
      for: 5m
      labels:
        severity: warning
        service: techze-diagnostic
        component: backend
      annotations:
        summary: "TechZe Diagnostic tem pods não prontos"
        description: "{{ $value }} pods do TechZe Diagnostic não estão prontos há mais de 5 minutos."
    
    # Alerta para health check falhando
    - alert: TechZeDiagnosticHealthCheckFailing
      expr: |
        up{job="techze-diagnostic-backend"} == 0
      for: 2m
      labels:
        severity: critical
        service: techze-diagnostic
        component: backend
      annotations:
        summary: "TechZe Diagnostic health check falhando"
        description: "O health check do TechZe Diagnostic está falhando há mais de 2 minutos."
    
    # Alerta para alta taxa de erro
    - alert: TechZeDiagnosticHighErrorRate
      expr: |
        (
          rate(http_requests_total{job="techze-diagnostic-backend", status=~"5.."}[5m])
          /
          rate(http_requests_total{job="techze-diagnostic-backend"}[5m])
        ) * 100 > 5
      for: 5m
      labels:
        severity: warning
        service: techze-diagnostic
        component: backend
      annotations:
        summary: "TechZe Diagnostic com alta taxa de erro"
        description: "Taxa de erro do TechZe Diagnostic está em {{ $value }}% nos últimos 5 minutos."
    
    # Alerta para alta latência
    - alert: TechZeDiagnosticHighLatency
      expr: |
        (
          rate(http_request_duration_seconds_sum{job="techze-diagnostic-backend"}[5m])
          /
          rate(http_request_duration_seconds_count{job="techze-diagnostic-backend"}[5m])
        ) > 1
      for: 5m
      labels:
        severity: warning
        service: techze-diagnostic
        component: backend
      annotations:
        summary: "TechZe Diagnostic com alta latência"
        description: "Latência média do TechZe Diagnostic está em {{ $value }}s nos últimos 5 minutos."
    
    # Alerta para uso alto de memória
    - alert: TechZeDiagnosticHighMemoryUsage
      expr: |
        (
          container_memory_working_set_bytes{pod=~"techze-diagnostic-backend-.*", namespace="production"}
          /
          container_spec_memory_limit_bytes{pod=~"techze-diagnostic-backend-.*", namespace="production"}
        ) * 100 > 80
      for: 10m
      labels:
        severity: warning
        service: techze-diagnostic
        component: backend
      annotations:
        summary: "TechZe Diagnostic com alto uso de memória"
        description: "Pod {{ $labels.pod }} está usando {{ $value }}% da memória disponível."
    
    # Alerta para uso alto de CPU
    - alert: TechZeDiagnosticHighCPUUsage
      expr: |
        (
          rate(container_cpu_usage_seconds_total{pod=~"techze-diagnostic-backend-.*", namespace="production"}[5m])
          /
          container_spec_cpu_quota{pod=~"techze-diagnostic-backend-.*", namespace="production"}
          * container_spec_cpu_period{pod=~"techze-diagnostic-backend-.*", namespace="production"}
        ) * 100 > 80
      for: 10m
      labels:
        severity: warning
        service: techze-diagnostic
        component: backend
      annotations:
        summary: "TechZe Diagnostic com alto uso de CPU"
        description: "Pod {{ $labels.pod }} está usando {{ $value }}% da CPU disponível."

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: techze-diagnostic-backend-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: techze-diagnostic-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: techze-diagnostic-backend-pdb
  namespace: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: techze-diagnostic
      component: backend