#!/usr/bin/env python3
"""
üéØ VALIDA√á√ÉO FINAL - TechZe-Diagnostico
Script completo de valida√ß√£o para confirmar 100% de completude
"""

import os
import sys
import json
import time
import subprocess
import requests
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any

class SystemValidator:
    """Validador completo do sistema"""
    
    def __init__(self):
        self.results = {}
        self.score = 0
        self.max_score = 100
        self.start_time = datetime.now()
        
    def validate_structure(self) -> bool:
        """Valida estrutura de pastas e arquivos essenciais"""
        print("üìÅ Validando estrutura do projeto...")
        
        required_paths = [
            "microservices/diagnostic_service/app/main.py",
            "microservices/diagnostic_service/requirements.txt",
            "package.json",
            "src/components",
            "docs/README.md",
            "docs/API_REFERENCE.md",
            "docs/DEPLOYMENT_GUIDE.md",
            "render.yaml",
            ".github/workflows" if os.path.exists(".github") else None
        ]
        
        missing = []
        for path in required_paths:
            if path and not os.path.exists(path):
                missing.append(path)
        
        if missing:
            print(f"‚ùå Arquivos/pastas faltando: {missing}")
            return False
            
        print("‚úÖ Estrutura do projeto validada")
        return True
    
    def validate_backend(self) -> bool:
        """Valida backend Python"""
        print("üêç Validando backend...")
        
        try:
            # Verifica se pode importar m√≥dulos principais
            backend_path = "microservices/diagnostic_service"
            sys.path.insert(0, backend_path)
            
            # Testa importa√ß√µes b√°sicas
            from app.core.config import settings
            from app.core.database_pool import pool_manager
            from app.core.query_optimizer import query_optimizer
            
            print("‚úÖ M√≥dulos backend carregados com sucesso")
            return True
            
        except ImportError as e:
            print(f"‚ùå Erro ao importar m√≥dulos: {e}")
            return False
        except Exception as e:
            print(f"‚ùå Erro no backend: {e}")
            return False
    
    def validate_frontend(self) -> bool:
        """Valida frontend React"""
        print("‚öõÔ∏è Validando frontend...")
        
        try:
            # Verifica package.json
            with open("package.json", "r") as f:
                package = json.load(f)
            
            required_deps = ["react", "typescript", "vite"]
            missing_deps = []
            
            all_deps = {**package.get("dependencies", {}), **package.get("devDependencies", {})}
            
            for dep in required_deps:
                if not any(dep in key for key in all_deps.keys()):
                    missing_deps.append(dep)
            
            if missing_deps:
                print(f"‚ùå Depend√™ncias faltando: {missing_deps}")
                return False
                
            print("‚úÖ Frontend configurado corretamente")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no frontend: {e}")
            return False
    
    def validate_tests(self) -> bool:
        """Valida suite de testes"""
        print("üß™ Validando testes...")
        
        test_files = [
            "microservices/diagnostic_service/tests/test_performance.py",
            "microservices/diagnostic_service/tests/test_integration.py",
            "microservices/diagnostic_service/run_tests.py"
        ]
        
        for test_file in test_files:
            if not os.path.exists(test_file):
                print(f"‚ùå Arquivo de teste faltando: {test_file}")
                return False
        
        print("‚úÖ Suite de testes presente")
        return True
    
    def validate_documentation(self) -> bool:
        """Valida documenta√ß√£o"""
        print("üìö Validando documenta√ß√£o...")
        
        doc_files = [
            "docs/README.md",
            "docs/API_REFERENCE.md", 
            "docs/DEPLOYMENT_GUIDE.md"
        ]
        
        for doc_file in doc_files:
            if not os.path.exists(doc_file):
                print(f"‚ùå Documenta√ß√£o faltando: {doc_file}")
                return False
            
            # Verifica se arquivo n√£o est√° vazio
            if os.path.getsize(doc_file) < 100:
                print(f"‚ùå Documenta√ß√£o muito pequena: {doc_file}")
                return False
        
        print("‚úÖ Documenta√ß√£o completa")
        return True
    
    def validate_performance_features(self) -> bool:
        """Valida features de performance implementadas"""
        print("üöÄ Validando features de performance...")
        
        performance_files = [
            "microservices/diagnostic_service/app/core/database_pool.py",
            "microservices/diagnostic_service/app/core/query_optimizer.py",
            "microservices/diagnostic_service/app/api/v3/performance_endpoints.py"
        ]
        
        for file_path in performance_files:
            if not os.path.exists(file_path):
                print(f"‚ùå Feature de performance faltando: {file_path}")
                return False
                
        print("‚úÖ Features de performance implementadas")
        return True
    
    def validate_deployment_config(self) -> bool:
        """Valida configura√ß√µes de deploy"""
        print("üöÄ Validando configura√ß√µes de deploy...")
        
        if not os.path.exists("render.yaml"):
            print("‚ùå render.yaml n√£o encontrado")
            return False
            
        if os.path.exists("Dockerfile"):
            print("‚úÖ Docker configurado")
        else:
            print("‚ö†Ô∏è Dockerfile n√£o encontrado (opcional)")
            
        print("‚úÖ Configura√ß√µes de deploy validadas")
        return True
    
    def calculate_completeness(self) -> Dict[str, Any]:
        """Calcula porcentagem de completude"""
        validations = [
            ("Estrutura do Projeto", self.validate_structure),
            ("Backend Python", self.validate_backend),
            ("Frontend React", self.validate_frontend),
            ("Suite de Testes", self.validate_tests),
            ("Documenta√ß√£o", self.validate_documentation),
            ("Performance Features", self.validate_performance_features),
            ("Deploy Config", self.validate_deployment_config)
        ]
        
        passed = 0
        total = len(validations)
        
        for name, validator in validations:
            try:
                if validator():
                    passed += 1
                    self.results[name] = "‚úÖ Passed"
                else:
                    self.results[name] = "‚ùå Failed"
            except Exception as e:
                self.results[name] = f"‚ùå Error: {e}"
        
        completion_percentage = (passed / total) * 100
        
        return {
            "completion_percentage": completion_percentage,
            "passed_validations": passed,
            "total_validations": total,
            "results": self.results,
            "timestamp": self.start_time.isoformat(),
            "duration": str(datetime.now() - self.start_time)
        }
    
    def generate_final_report(self) -> Dict[str, Any]:
        """Gera relat√≥rio final de valida√ß√£o"""
        print("\n" + "="*60)
        print("üéØ EXECUTANDO VALIDA√á√ÉO FINAL DO SISTEMA")
        print("="*60)
        
        completion_data = self.calculate_completeness()
        
        # Status geral
        percentage = completion_data["completion_percentage"]
        if percentage >= 85:
            status = "üéâ SISTEMA PRONTO PARA PRODU√á√ÉO"
            status_color = "green"
        elif percentage >= 70:
            status = "‚ö†Ô∏è SISTEMA QUASE PRONTO"
            status_color = "yellow"
        else:
            status = "‚ùå SISTEMA PRECISA DE CORRE√á√ïES"
            status_color = "red"
        
        # Relat√≥rio detalhado
        print(f"\n{status}")
        print(f"üìä Completude: {percentage:.1f}%")
        print(f"‚úÖ Valida√ß√µes aprovadas: {completion_data['passed_validations']}/{completion_data['total_validations']}")
        print(f"‚è±Ô∏è Tempo de valida√ß√£o: {completion_data['duration']}")
        
        print("\nüìã DETALHES DAS VALIDA√á√ïES:")
        for validation, result in completion_data["results"].items():
            print(f"  {validation}: {result}")
        
        # Recomenda√ß√µes
        print("\nüí° PR√ìXIMOS PASSOS:")
        if percentage >= 85:
            print("  ‚úÖ Sistema pronto para deploy em produ√ß√£o")
            print("  ‚úÖ Documenta√ß√£o completa dispon√≠vel")
            print("  ‚úÖ Testes implementados e funcionais")
            print("  üöÄ PODE FAZER DEPLOY COM CONFIAN√áA!")
        else:
            print("  üîß Revisar itens que falharam na valida√ß√£o")
            print("  üìö Completar documenta√ß√£o se necess√°rio")
            print("  üß™ Garantir que todos os testes passem")
        
        return {
            **completion_data,
            "status": status,
            "ready_for_production": percentage >= 85
        }

def main():
    """Fun√ß√£o principal"""
    try:
        validator = SystemValidator()
        final_report = validator.generate_final_report()
        
        # Salva relat√≥rio
        with open("FINAL_VALIDATION_REPORT.json", "w") as f:
            json.dump(final_report, f, indent=2)
        
        print(f"\nüìÑ Relat√≥rio salvo em: FINAL_VALIDATION_REPORT.json")
        
        # C√≥digo de sa√≠da
        if final_report["ready_for_production"]:
            print("\nüéä VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!")
            return 0
        else:
            print("\n‚ö†Ô∏è Sistema precisa de ajustes antes da produ√ß√£o")
            return 1
            
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())