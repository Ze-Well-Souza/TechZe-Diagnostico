/**
 * Runner Automatizado de Testes - Semana 3
 * Agente TRAE testando Backend do CURSOR
 * Data: 09/01/2025
 */

import { RealTestExecutor, TestSession, runWeek3Tests } from './realTestExecutor';
import { TestConfig } from '../config/testConfig';

export interface AutomationConfig {
  runContinuous: boolean;
  intervalMinutes: number;
  maxRuns: number;
  emailNotifications: boolean;
  slackNotifications: boolean;
  generateDashboard: boolean;
  autoRetryFailed: boolean;
}

export interface AutomationSession {
  automationId: string;
  startTime: Date;
  endTime?: Date;
  totalRuns: number;
  successfulRuns: number;
  failedRuns: number;
  testSessions: TestSession[];
  config: AutomationConfig;
  status: 'running' | 'completed' | 'failed' | 'stopped';
}

export class AutomatedTestRunner {
  private automationSession: AutomationSession;
  private isRunning: boolean = false;
  private intervalId?: NodeJS.Timeout;

  constructor(config: AutomationConfig) {
    this.automationSession = {
      automationId: `auto-${Date.now()}`,
      startTime: new Date(),
      totalRuns: 0,
      successfulRuns: 0,
      failedRuns: 0,
      testSessions: [],
      config,
      status: 'running'
    };
  }

  // Iniciar automa√ß√£o
  async startAutomation(): Promise<void> {
    console.log('ü§ñ Iniciando Automa√ß√£o de Testes - Semana 3');
    console.log(`üìã Configura√ß√£o:`);
    console.log(`   - Execu√ß√£o cont√≠nua: ${this.automationSession.config.runContinuous}`);
    console.log(`   - Intervalo: ${this.automationSession.config.intervalMinutes} minutos`);
    console.log(`   - M√°ximo de execu√ß√µes: ${this.automationSession.config.maxRuns}`);
    console.log(`   - Retry autom√°tico: ${this.automationSession.config.autoRetryFailed}`);

    this.isRunning = true;

    try {
      // Primeira execu√ß√£o
      await this.runSingleTestCycle();

      // Se configurado para execu√ß√£o cont√≠nua
      if (this.automationSession.config.runContinuous) {
        this.scheduleNextRun();
      } else {
        this.completeAutomation();
      }

    } catch (error) {
      console.error('‚ùå Erro na automa√ß√£o:', error);
      this.automationSession.status = 'failed';
      await this.sendNotification('error', `Automa√ß√£o falhou: ${error.message}`);
    }
  }

  // Executar um ciclo de testes
  private async runSingleTestCycle(): Promise<void> {
    const cycleNumber = this.automationSession.totalRuns + 1;
    console.log(`\nüîÑ Iniciando Ciclo ${cycleNumber}`);
    
    try {
      // Executar testes
      const testSession = await runWeek3Tests();
      
      // Registrar resultado
      this.automationSession.testSessions.push(testSession);
      this.automationSession.totalRuns++;
      
      if (testSession.summary.overallStatus === 'passed' || testSession.summary.overallStatus === 'partial') {
        this.automationSession.successfulRuns++;
        console.log(`‚úÖ Ciclo ${cycleNumber} conclu√≠do com sucesso`);
        
        // Notificar sucesso se configurado
        if (testSession.summary.passRate === 100) {
          await this.sendNotification('success', `Ciclo ${cycleNumber}: 100% de sucesso!`);
        }
      } else {
        this.automationSession.failedRuns++;
        console.log(`‚ùå Ciclo ${cycleNumber} falhou`);
        
        // Notificar falha
        await this.sendNotification('warning', 
          `Ciclo ${cycleNumber} falhou. Taxa de sucesso: ${testSession.summary.passRate.toFixed(2)}%`);
        
        // Retry autom√°tico se configurado
        if (this.automationSession.config.autoRetryFailed) {
          console.log('üîÑ Executando retry autom√°tico...');
          await this.delay(30000); // Aguardar 30 segundos
          await this.runSingleTestCycle();
        }
      }
      
      // Gerar relat√≥rio do ciclo
      await this.generateCycleReport(testSession, cycleNumber);
      
      // Atualizar dashboard se configurado
      if (this.automationSession.config.generateDashboard) {
        await this.updateDashboard();
      }
      
    } catch (error) {
      console.error(`‚ùå Erro no ciclo ${cycleNumber}:`, error);
      this.automationSession.failedRuns++;
      await this.sendNotification('error', `Ciclo ${cycleNumber} com erro: ${error.message}`);
    }
  }

  // Agendar pr√≥xima execu√ß√£o
  private scheduleNextRun(): void {
    if (!this.isRunning || this.automationSession.totalRuns >= this.automationSession.config.maxRuns) {
      this.completeAutomation();
      return;
    }

    const intervalMs = this.automationSession.config.intervalMinutes * 60 * 1000;
    console.log(`‚è∞ Pr√≥xima execu√ß√£o em ${this.automationSession.config.intervalMinutes} minutos`);
    
    this.intervalId = setTimeout(async () => {
      if (this.isRunning) {
        await this.runSingleTestCycle();
        this.scheduleNextRun();
      }
    }, intervalMs);
  }

  // Completar automa√ß√£o
  private completeAutomation(): void {
    this.isRunning = false;
    this.automationSession.endTime = new Date();
    this.automationSession.status = 'completed';
    
    if (this.intervalId) {
      clearTimeout(this.intervalId);
    }
    
    console.log('üèÅ Automa√ß√£o conclu√≠da');
    console.log(`üìä Resumo:`);
    console.log(`   - Total de execu√ß√µes: ${this.automationSession.totalRuns}`);
    console.log(`   - Sucessos: ${this.automationSession.successfulRuns}`);
    console.log(`   - Falhas: ${this.automationSession.failedRuns}`);
    console.log(`   - Taxa de sucesso: ${((this.automationSession.successfulRuns / this.automationSession.totalRuns) * 100).toFixed(2)}%`);
    
    // Gerar relat√≥rio final
    this.generateFinalReport();
    
    // Notifica√ß√£o final
    this.sendNotification('info', 
      `Automa√ß√£o conclu√≠da. ${this.automationSession.totalRuns} execu√ß√µes realizadas.`);
  }

  // Parar automa√ß√£o
  async stopAutomation(): Promise<void> {
    console.log('üõë Parando automa√ß√£o...');
    this.isRunning = false;
    this.automationSession.status = 'stopped';
    
    if (this.intervalId) {
      clearTimeout(this.intervalId);
    }
    
    await this.sendNotification('info', 'Automa√ß√£o interrompida pelo usu√°rio');
  }

  // Gerar relat√≥rio de ciclo
  private async generateCycleReport(session: TestSession, cycleNumber: number): Promise<void> {
    const reportContent = `# Relat√≥rio Ciclo ${cycleNumber} - Semana 3
**Data:** ${new Date().toLocaleString('pt-BR')}
**Session ID:** ${session.sessionId}
**Ambiente:** ${session.environment.name}

## üìä Resumo do Ciclo
- **Status:** ${session.summary.overallStatus.toUpperCase()}
- **Taxa de Sucesso:** ${session.summary.passRate.toFixed(2)}%
- **Testes Executados:** ${session.totalTests}
- **Tempo M√©dio:** ${session.summary.averageResponseTime.toFixed(2)}ms
- **Grade Performance:** ${session.summary.performanceGrade}

## üéØ Scores por API
- **Or√ßamentos:** ${session.summary.apiScores.orcamentos}/100
- **Estoque:** ${session.summary.apiScores.estoque}/100
- **Ordem de Servi√ßo:** ${session.summary.apiScores.ordemServico}/100

## ‚ö†Ô∏è Issues Identificados
${session.summary.criticalIssues.length > 0 ? 
  session.summary.criticalIssues.map(issue => `- ${issue}`).join('\n') : 
  'Nenhum issue cr√≠tico identificado.'}

## üí° Recomenda√ß√µes
${session.summary.recommendations.length > 0 ? 
  session.summary.recommendations.map(rec => `- ${rec}`).join('\n') : 
  'Nenhuma recomenda√ß√£o espec√≠fica.'}

---
*Relat√≥rio gerado automaticamente pelo Agente TRAE*
`;

    // Em implementa√ß√£o real, salvar arquivo
    console.log(`üìÑ Relat√≥rio do Ciclo ${cycleNumber} gerado`);
  }

  // Gerar relat√≥rio final da automa√ß√£o
  private async generateFinalReport(): Promise<void> {
    const duration = this.automationSession.endTime ? 
      (this.automationSession.endTime.getTime() - this.automationSession.startTime.getTime()) / 1000 / 60 : 0;
    
    const avgPassRate = this.automationSession.testSessions.length > 0 ?
      this.automationSession.testSessions.reduce((sum, session) => sum + session.summary.passRate, 0) / this.automationSession.testSessions.length : 0;
    
    const avgResponseTime = this.automationSession.testSessions.length > 0 ?
      this.automationSession.testSessions.reduce((sum, session) => sum + session.summary.averageResponseTime, 0) / this.automationSession.testSessions.length : 0;

    const reportContent = `# Relat√≥rio Final de Automa√ß√£o - Semana 3
**Data In√≠cio:** ${this.automationSession.startTime.toLocaleString('pt-BR')}
**Data Fim:** ${this.automationSession.endTime?.toLocaleString('pt-BR')}
**Dura√ß√£o Total:** ${duration.toFixed(2)} minutos
**ID da Automa√ß√£o:** ${this.automationSession.automationId}

## üéØ Resumo Executivo
- **Status da Automa√ß√£o:** ${this.automationSession.status.toUpperCase()}
- **Total de Execu√ß√µes:** ${this.automationSession.totalRuns}
- **Execu√ß√µes Bem-sucedidas:** ${this.automationSession.successfulRuns}
- **Execu√ß√µes Falharam:** ${this.automationSession.failedRuns}
- **Taxa de Sucesso da Automa√ß√£o:** ${((this.automationSession.successfulRuns / this.automationSession.totalRuns) * 100).toFixed(2)}%

## üìä M√©tricas M√©dias
- **Taxa de Sucesso M√©dia dos Testes:** ${avgPassRate.toFixed(2)}%
- **Tempo de Resposta M√©dio:** ${avgResponseTime.toFixed(2)}ms
- **Estabilidade do Sistema:** ${this.calculateSystemStability()}%

## üìà Tend√™ncias Identificadas
${this.analyzeTrends()}

## üîç An√°lise de Qualidade
${this.generateQualityAnalysis()}

## üéØ Conclus√µes e Recomenda√ß√µes Finais
${this.generateFinalRecommendations()}

## üìã Pr√≥ximos Passos
1. Analisar padr√µes de falha identificados
2. Implementar melhorias baseadas nas m√©tricas coletadas
3. Ajustar configura√ß√µes de automa√ß√£o se necess√°rio
4. Planejar testes de regress√£o
5. Documentar li√ß√µes aprendidas

---
*Relat√≥rio gerado automaticamente pelo Sistema de Automa√ß√£o do Agente TRAE*
*Semana 3 - Testes Cruzados Backend CURSOR*
`;

    console.log('üìÑ Relat√≥rio Final de Automa√ß√£o gerado');
  }

  // Calcular estabilidade do sistema
  private calculateSystemStability(): number {
    if (this.automationSession.testSessions.length === 0) return 0;
    
    const consistentResults = this.automationSession.testSessions.filter(session => 
      session.summary.passRate >= 80
    ).length;
    
    return Math.round((consistentResults / this.automationSession.testSessions.length) * 100);
  }

  // Analisar tend√™ncias
  private analyzeTrends(): string {
    if (this.automationSession.testSessions.length < 2) {
      return 'Dados insuficientes para an√°lise de tend√™ncias.';
    }
    
    const sessions = this.automationSession.testSessions;
    const trends = [];
    
    // Tend√™ncia de taxa de sucesso
    const firstHalf = sessions.slice(0, Math.floor(sessions.length / 2));
    const secondHalf = sessions.slice(Math.floor(sessions.length / 2));
    
    const firstHalfAvg = firstHalf.reduce((sum, s) => sum + s.summary.passRate, 0) / firstHalf.length;
    const secondHalfAvg = secondHalf.reduce((sum, s) => sum + s.summary.passRate, 0) / secondHalf.length;
    
    if (secondHalfAvg > firstHalfAvg + 5) {
      trends.push('üìà **Melhoria na taxa de sucesso** ao longo do tempo');
    } else if (firstHalfAvg > secondHalfAvg + 5) {
      trends.push('üìâ **Degrada√ß√£o na taxa de sucesso** ao longo do tempo');
    } else {
      trends.push('üìä **Taxa de sucesso est√°vel** ao longo do tempo');
    }
    
    // Tend√™ncia de performance
    const firstHalfPerf = firstHalf.reduce((sum, s) => sum + s.summary.averageResponseTime, 0) / firstHalf.length;
    const secondHalfPerf = secondHalf.reduce((sum, s) => sum + s.summary.averageResponseTime, 0) / secondHalf.length;
    
    if (secondHalfPerf < firstHalfPerf - 50) {
      trends.push('‚ö° **Melhoria na performance** ao longo do tempo');
    } else if (secondHalfPerf > firstHalfPerf + 50) {
      trends.push('üêå **Degrada√ß√£o na performance** ao longo do tempo');
    } else {
      trends.push('‚öñÔ∏è **Performance est√°vel** ao longo do tempo');
    }
    
    return trends.join('\n');
  }

  // Gerar an√°lise de qualidade
  private generateQualityAnalysis(): string {
    if (this.automationSession.testSessions.length === 0) {
      return 'Nenhuma sess√£o de teste dispon√≠vel para an√°lise.';
    }
    
    const sessions = this.automationSession.testSessions;
    const analysis = [];
    
    // An√°lise de APIs
    const avgOrcamentos = sessions.reduce((sum, s) => sum + s.summary.apiScores.orcamentos, 0) / sessions.length;
    const avgEstoque = sessions.reduce((sum, s) => sum + s.summary.apiScores.estoque, 0) / sessions.length;
    const avgOrdem = sessions.reduce((sum, s) => sum + s.summary.apiScores.ordemServico, 0) / sessions.length;
    
    analysis.push(`**API de Or√ßamentos:** ${avgOrcamentos.toFixed(1)}/100 - ${this.getQualityLevel(avgOrcamentos)}`);
    analysis.push(`**API de Estoque:** ${avgEstoque.toFixed(1)}/100 - ${this.getQualityLevel(avgEstoque)}`);
    analysis.push(`**API de Ordem de Servi√ßo:** ${avgOrdem.toFixed(1)}/100 - ${this.getQualityLevel(avgOrdem)}`);
    
    // API com melhor performance
    const bestApi = avgOrcamentos >= avgEstoque && avgOrcamentos >= avgOrdem ? 'Or√ßamentos' :
                   avgEstoque >= avgOrdem ? 'Estoque' : 'Ordem de Servi√ßo';
    analysis.push(`\nüèÜ **API com melhor performance:** ${bestApi}`);
    
    // Issues mais frequentes
    const allIssues = sessions.flatMap(s => s.summary.criticalIssues);
    const issueFrequency = allIssues.reduce((acc, issue) => {
      acc[issue] = (acc[issue] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    const topIssues = Object.entries(issueFrequency)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3);
    
    if (topIssues.length > 0) {
      analysis.push('\nüîç **Issues mais frequentes:**');
      topIssues.forEach(([issue, count]) => {
        analysis.push(`- ${issue} (${count}x)`);
      });
    }
    
    return analysis.join('\n');
  }

  // Obter n√≠vel de qualidade
  private getQualityLevel(score: number): string {
    if (score >= 90) return 'üü¢ Excelente';
    if (score >= 80) return 'üü° Bom';
    if (score >= 70) return 'üü† Regular';
    return 'üî¥ Precisa Melhorar';
  }

  // Gerar recomenda√ß√µes finais
  private generateFinalRecommendations(): string {
    const recommendations = [];
    const sessions = this.automationSession.testSessions;
    
    if (sessions.length === 0) {
      return 'Nenhuma recomenda√ß√£o dispon√≠vel - sem dados de teste.';
    }
    
    const avgPassRate = sessions.reduce((sum, s) => sum + s.summary.passRate, 0) / sessions.length;
    const avgResponseTime = sessions.reduce((sum, s) => sum + s.summary.averageResponseTime, 0) / sessions.length;
    
    // Recomenda√ß√µes baseadas em taxa de sucesso
    if (avgPassRate < 80) {
      recommendations.push('üîß **Cr√≠tico:** Investigar e corrigir falhas recorrentes - taxa de sucesso abaixo do aceit√°vel');
    } else if (avgPassRate < 95) {
      recommendations.push('‚ö†Ô∏è **Importante:** Melhorar estabilidade geral do sistema');
    } else {
      recommendations.push('‚úÖ **Parab√©ns:** Sistema demonstra alta estabilidade');
    }
    
    // Recomenda√ß√µes baseadas em performance
    if (avgResponseTime > 1000) {
      recommendations.push('‚ö° **Cr√≠tico:** Otimiza√ß√£o urgente de performance necess√°ria');
    } else if (avgResponseTime > 500) {
      recommendations.push('üöÄ **Recomendado:** Implementar otimiza√ß√µes de performance');
    } else {
      recommendations.push('üéØ **Excelente:** Performance dentro dos padr√µes esperados');
    }
    
    // Recomenda√ß√µes baseadas em estabilidade
    const stability = this.calculateSystemStability();
    if (stability < 70) {
      recommendations.push('üîÑ **Urgente:** Sistema apresenta instabilidade - revisar arquitetura');
    } else if (stability < 90) {
      recommendations.push('üîß **Sugerido:** Implementar melhorias de estabilidade');
    }
    
    // Recomenda√ß√µes para automa√ß√£o
    if (this.automationSession.failedRuns > this.automationSession.successfulRuns * 0.2) {
      recommendations.push('ü§ñ **Automa√ß√£o:** Ajustar configura√ß√µes de retry e timeout');
    }
    
    return recommendations.join('\n');
  }

  // Atualizar dashboard
  private async updateDashboard(): Promise<void> {
    // Em implementa√ß√£o real, atualizar dashboard web
    console.log('üìä Dashboard atualizado');
  }

  // Enviar notifica√ß√£o
  private async sendNotification(type: 'success' | 'warning' | 'error' | 'info', message: string): Promise<void> {
    const timestamp = new Date().toLocaleString('pt-BR');
    console.log(`üîî [${type.toUpperCase()}] ${timestamp}: ${message}`);
    
    // Em implementa√ß√£o real, enviar email/slack se configurado
    if (this.automationSession.config.emailNotifications) {
      // Enviar email
    }
    
    if (this.automationSession.config.slackNotifications) {
      // Enviar para Slack
    }
  }

  // Utilit√°rio para delay
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Getter para sess√£o de automa√ß√£o
  public getAutomationSession(): AutomationSession {
    return this.automationSession;
  }

  // M√©todo para obter status atual
  public getStatus(): string {
    return `Status: ${this.automationSession.status} | Execu√ß√µes: ${this.automationSession.totalRuns} | Sucessos: ${this.automationSession.successfulRuns} | Falhas: ${this.automationSession.failedRuns}`;
  }
}

// Fun√ß√£o para iniciar automa√ß√£o com configura√ß√£o padr√£o
export async function startDefaultAutomation(): Promise<AutomatedTestRunner> {
  const defaultConfig: AutomationConfig = {
    runContinuous: true,
    intervalMinutes: 30,
    maxRuns: 10,
    emailNotifications: false,
    slackNotifications: false,
    generateDashboard: true,
    autoRetryFailed: true
  };
  
  const runner = new AutomatedTestRunner(defaultConfig);
  await runner.startAutomation();
  return runner;
}

// Fun√ß√£o para automa√ß√£o √∫nica
export async function runSingleAutomatedTest(): Promise<AutomatedTestRunner> {
  const singleRunConfig: AutomationConfig = {
    runContinuous: false,
    intervalMinutes: 0,
    maxRuns: 1,
    emailNotifications: false,
    slackNotifications: false,
    generateDashboard: true,
    autoRetryFailed: false
  };
  
  const runner = new AutomatedTestRunner(singleRunConfig);
  await runner.startAutomation();
  return runner;
}

export default AutomatedTestRunner;