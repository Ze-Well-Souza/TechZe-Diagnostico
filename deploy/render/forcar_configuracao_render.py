#!/usr/bin/env python3
"""
For√ßar Configura√ß√£o do Render - M√©todo Alternativo
TechZe Diagn√≥stico - Corre√ß√£o For√ßada via API
"""

import requests
import json
import time
from datetime import datetime

class RenderForceConfig:
    def __init__(self):
        self.render_api_key = "rnd_Tj1JybEJij6A3UhouM7spm8LRbkX"
        self.frontend_service_id = "srv-d13i0ps9c44c739cd3e0"
        self.headers = {
            "Authorization": f"Bearer {self.render_api_key}",
            "Content-Type": "application/json"
        }
        
    def log(self, message, level="INFO"):
        """Log com timestamp"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def force_service_update(self):
        """For√ßa atualiza√ß√£o completa do servi√ßo"""
        self.log("üîß FOR√áANDO atualiza√ß√£o completa do servi√ßo...")
        
        # Configura√ß√£o completa do servi√ßo
        service_config = {
            "name": "techze-frontend-app",
            "type": "static_site",
            "serviceDetails": {
                "buildCommand": "npm install && npm run build",
                "publishPath": "dist",
                "pullRequestPreviewsEnabled": "yes",
                "headers": [],
                "redirects": [],
                "env": "node"
            }
        }
        
        try:
            response = requests.patch(
                f"https://api.render.com/v1/services/{self.frontend_service_id}",
                headers=self.headers,
                json=service_config,
                timeout=30
            )
            
            self.log(f"üìä Status da resposta: {response.status_code}")
            
            if response.status_code in [200, 202]:
                self.log("‚úÖ Configura√ß√£o for√ßada com sucesso!", "SUCCESS")
                return response.json()
            else:
                self.log(f"‚ùå Erro ao for√ßar configura√ß√£o: {response.status_code}", "ERROR")
                self.log(f"Resposta: {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå Erro: {e}", "ERROR")
            return None
    
    def update_service_details_only(self):
        """Atualiza apenas os detalhes do servi√ßo"""
        self.log("üéØ Atualizando apenas serviceDetails...")
        
        config_data = {
            "serviceDetails": {
                "buildCommand": "npm install && npm run build",
                "publishPath": "dist"
            }
        }
        
        try:
            response = requests.patch(
                f"https://api.render.com/v1/services/{self.frontend_service_id}",
                headers=self.headers,
                json=config_data,
                timeout=30
            )
            
            if response.status_code in [200, 202]:
                self.log("‚úÖ ServiceDetails atualizado!", "SUCCESS")
                return response.json()
            else:
                self.log(f"‚ùå Erro: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå Erro: {e}", "ERROR")
            return None
    
    def try_individual_updates(self):
        """Tenta atualiza√ß√µes individuais"""
        self.log("üîÑ Tentando atualiza√ß√µes individuais...")
        
        # Tentar apenas build command
        self.log("1Ô∏è‚É£ Atualizando Build Command...")
        try:
            response1 = requests.patch(
                f"https://api.render.com/v1/services/{self.frontend_service_id}",
                headers=self.headers,
                json={"buildCommand": "npm install && npm run build"},
                timeout=30
            )
            self.log(f"   Build Command: {response1.status_code}")
        except Exception as e:
            self.log(f"   Build Command falhou: {e}", "ERROR")
        
        time.sleep(2)
        
        # Tentar apenas publish path
        self.log("2Ô∏è‚É£ Atualizando Publish Path...")
        try:
            response2 = requests.patch(
                f"https://api.render.com/v1/services/{self.frontend_service_id}",
                headers=self.headers,
                json={"publishPath": "dist"},
                timeout=30
            )
            self.log(f"   Publish Path: {response2.status_code}")
        except Exception as e:
            self.log(f"   Publish Path falhou: {e}", "ERROR")
        
        return True
    
    def verify_current_config(self):
        """Verifica configura√ß√£o atual"""
        self.log("üîç Verificando configura√ß√£o atual...")
        
        try:
            response = requests.get(
                f"https://api.render.com/v1/services/{self.frontend_service_id}",
                headers=self.headers,
                timeout=30
            )
            
            if response.status_code == 200:
                service_data = response.json()
                service_info = service_data.get('service', service_data)
                details = service_info.get('serviceDetails', {})
                
                current = {
                    "build_command": details.get('buildCommand', ''),
                    "publish_path": details.get('publishPath', ''),
                    "name": service_info.get('name', ''),
                    "type": service_info.get('type', '')
                }
                
                self.log("üìä CONFIGURA√á√ÉO ATUAL:")
                self.log(f"   Build Command: '{current['build_command']}'")
                self.log(f"   Publish Path: '{current['publish_path']}'")
                self.log(f"   Nome: {current['name']}")
                self.log(f"   Tipo: {current['type']}")
                
                return current
            else:
                self.log(f"‚ùå Erro ao verificar: {response.status_code}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå Erro: {e}", "ERROR")
            return None
    
    def create_manual_instructions(self):
        """Cria instru√ß√µes manuais detalhadas"""
        
        instructions = """
üõ†Ô∏è INSTRU√á√ïES MANUAIS PARA CONFIGURAR O RENDER

Como a API n√£o est√° aplicando as configura√ß√µes, siga estes passos:

1. üåê ACESSE O DASHBOARD:
   https://dashboard.render.com/static/srv-d13i0ps9c44c739cd3e0

2. üîß V√Å EM SETTINGS:
   - Clique na aba "Settings" no menu lateral

3. ‚öôÔ∏è CONFIGURE BUILD COMMAND:
   - Procure por "Build Command"
   - Apague o conte√∫do atual
   - Digite: npm install && npm run build
   - Clique em "Save Changes"

4. üìÇ CONFIGURE PUBLISH DIRECTORY:
   - Procure por "Publish Directory"
   - Apague "public"
   - Digite: dist
   - Clique em "Save Changes"

5. üöÄ FORCE NOVO DEPLOY:
   - V√° na aba "Manual Deploy"
   - Clique em "Deploy latest commit"
   - Aguarde o deploy completar (5-10 minutos)

6. üß™ TESTE O RESULTADO:
   - https://techze-frontend-app.onrender.com
   - https://techreparo.com
   - https://www.techreparo.com

‚ö†Ô∏è IMPORTANTE:
- Aguarde cada configura√ß√£o salvar antes da pr√≥xima
- O deploy pode demorar at√© 10 minutos
- Se ainda der 404, aguarde mais 5 minutos (propaga√ß√£o)

‚úÖ CONFIGURA√á√ïES CORRETAS:
- Build Command: npm install && npm run build
- Publish Directory: dist
- Service Type: Static Site
"""
        
        with open("INSTRUCOES_MANUAIS_RENDER.md", "w", encoding="utf-8") as f:
            f.write(instructions)
        
        print(instructions)
        
        return instructions
    
    def run_force_attempt(self):
        """Executa tentativa de for√ßa"""
        self.log("üöÄ INICIANDO TENTATIVA DE FOR√áA NA CONFIGURA√á√ÉO")
        self.log("="*60)
        
        # 1. Verificar estado atual
        initial_config = self.verify_current_config()
        
        # 2. Tentar atualiza√ß√£o completa
        self.log("\nüîß TENTATIVA 1: Atualiza√ß√£o completa...")
        result1 = self.force_service_update()
        
        time.sleep(5)
        
        # 3. Verificar se funcionou
        config_after_1 = self.verify_current_config()
        
        if config_after_1 and config_after_1['build_command'] and config_after_1['publish_path'] == 'dist':
            self.log("‚úÖ SUCESSO! Configura√ß√£o aplicada!", "SUCCESS")
            return True
        
        # 4. Tentar apenas serviceDetails
        self.log("\nüéØ TENTATIVA 2: Apenas serviceDetails...")
        result2 = self.update_service_details_only()
        
        time.sleep(5)
        
        # 5. Verificar novamente
        config_after_2 = self.verify_current_config()
        
        if config_after_2 and config_after_2['build_command'] and config_after_2['publish_path'] == 'dist':
            self.log("‚úÖ SUCESSO! Configura√ß√£o aplicada!", "SUCCESS")
            return True
        
        # 6. Tentar atualiza√ß√µes individuais
        self.log("\nüîÑ TENTATIVA 3: Atualiza√ß√µes individuais...")
        self.try_individual_updates()
        
        time.sleep(5)
        
        # 7. Verifica√ß√£o final
        final_config = self.verify_current_config()
        
        if final_config and final_config['build_command'] and final_config['publish_path'] == 'dist':
            self.log("‚úÖ SUCESSO! Configura√ß√£o aplicada!", "SUCCESS")
            return True
        
        # 8. Se nada funcionou, criar instru√ß√µes manuais
        self.log("\n‚ùå TODAS AS TENTATIVAS FALHARAM", "ERROR")
        self.log("üìã Criando instru√ß√µes manuais...", "WARNING")
        
        self.create_manual_instructions()
        
        return False

def main():
    """Fun√ß√£o principal"""
    forcer = RenderForceConfig()
    
    try:
        success = forcer.run_force_attempt()
        
        if success:
            print("\nüéâ CONFIGURA√á√ÉO APLICADA COM SUCESSO!")
            print("üöÄ Agora force um novo deploy no dashboard")
        else:
            print("\nüìã SIGA AS INSTRU√á√ïES MANUAIS CRIADAS")
            print("üìÑ Arquivo: INSTRUCOES_MANUAIS_RENDER.md")
        
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")

if __name__ == "__main__":
    main()