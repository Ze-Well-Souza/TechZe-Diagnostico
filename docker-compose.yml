# TechZe-Diagnóstico - Docker Compose para Produção
# ASSISTENTE IA - Orquestração completa dos serviços

services:
  # =============================================================================
  # Aplicação Principal TechZe
  # =============================================================================
  techze-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: techze-diagnostic
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "80:80"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${SUPABASE_DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    depends_on:
      - redis
    networks:
      - techze-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Cache Redis
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: techze-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - techze-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # =============================================================================
  # Monitoramento Prometheus
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: techze-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - techze-network
    depends_on:
      - techze-app

  # =============================================================================
  # Dashboards Grafana
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: techze-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - techze-network
    depends_on:
      - prometheus

  # =============================================================================
  # Alertas (Alertmanager)
  # =============================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: techze-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./docker/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - techze-network

  # =============================================================================
  # Backup Automático
  # =============================================================================
  backup:
    image: postgres:15-alpine
    container_name: techze-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - backup_data:/backup
      - ./docker/backup.sh:/backup.sh
    command: >
      sh -c "
        chmod +x /backup.sh &&
        while true; do
          /backup.sh &&
          sleep 86400
        done
      "
    networks:
      - techze-network

  # =============================================================================
  # Nginx Reverse Proxy (Opcional para múltiplos domínios)
  # =============================================================================
  nginx-proxy:
    image: nginx:alpine
    container_name: techze-nginx-proxy
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./docker/nginx-proxy.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    networks:
      - techze-network
    depends_on:
      - techze-app
    profiles:
      - ssl

# =============================================================================
# Volumes Persistentes
# =============================================================================
volumes:
  app_logs:
    driver: local
  app_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  backup_data:
    driver: local

# =============================================================================
# Redes
# =============================================================================
networks:
  techze-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16