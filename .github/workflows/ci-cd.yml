name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # TESTES E VALIDAÇÃO
  # ==========================================
  
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        working-directory: ./microservices/diagnostic_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx
      
      - name: Run database migrations
        working-directory: ./microservices/diagnostic_service
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          python -m alembic upgrade head
      
      - name: Run tests with coverage
        working-directory: ./microservices/diagnostic_service
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./microservices/diagnostic_service/coverage.xml
          flags: backend
          name: backend-coverage
  
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Run tests
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Python Security Scan
        working-directory: ./microservices/diagnostic_service
        run: |
          pip install safety bandit
          safety check -r requirements.txt
          bandit -r app/ -f json -o bandit-report.json
      
      - name: Node.js Security Scan
        run: |
          npm audit --audit-level moderate
  
  # ==========================================
  # BUILD E DEPLOY
  # ==========================================
  
  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: [test-backend, security-scan]
    if: github.event_name != 'pull_request'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./microservices/diagnostic_service
          file: ./microservices/diagnostic_service/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
  
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [test-frontend]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        env:
          NODE_ENV: production
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: dist/
          retention-days: 30
  
  # ==========================================
  # DEPLOY STAGING
  # ==========================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.techze-diagnostic.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Deploy to Kubernetes
        env:
          KUBECONFIG: kubeconfig
          IMAGE_TAG: ${{ needs.build-backend.outputs.image-tag }}
        run: |
          # Substituir variáveis no manifesto
          envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
          envsubst < k8s/staging/service.yaml | kubectl apply -f -
          envsubst < k8s/staging/ingress.yaml | kubectl apply -f -
          
          # Aguardar rollout
          kubectl rollout status deployment/techze-diagnostic-backend -n staging
          kubectl rollout status deployment/techze-diagnostic-frontend -n staging
      
      - name: Run health checks
        run: |
          # Aguardar serviços ficarem prontos
          sleep 30
          
          # Verificar health endpoints
          curl -f https://staging-api.techze-diagnostic.com/health
          curl -f https://staging.techze-diagnostic.com/health
      
      - name: Run smoke tests
        run: |
          # Executar testes básicos de funcionalidade
          npm run test:e2e:staging
  
  # ==========================================
  # DEPLOY PRODUÇÃO
  # ==========================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: production
      url: https://techze-diagnostic.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: Create backup
        env:
          KUBECONFIG: kubeconfig
        run: |
          # Backup do banco de dados
          kubectl exec -n production deployment/postgres -- pg_dump -U postgres techze_db > backup-$(date +%Y%m%d-%H%M%S).sql
          
          # Upload backup para S3
          aws s3 cp backup-*.sql s3://techze-backups/database/
      
      - name: Deploy with rolling update
        env:
          KUBECONFIG: kubeconfig
          IMAGE_TAG: ${{ needs.build-backend.outputs.image-tag }}
        run: |
          # Rolling deployment
          envsubst < k8s/production/deployment.yaml | kubectl apply -f -
          
          # Aguardar rollout com timeout
          kubectl rollout status deployment/techze-diagnostic-backend -n production --timeout=600s
          kubectl rollout status deployment/techze-diagnostic-frontend -n production --timeout=600s
      
      - name: Verify deployment
        run: |
          # Aguardar estabilização
          sleep 60
          
          # Health checks
          curl -f https://api.techze-diagnostic.com/health
          curl -f https://techze-diagnostic.com/health
          
          # Verificar métricas
          curl -f https://api.techze-diagnostic.com/metrics
      
      - name: Run production tests
        run: |
          # Testes de regressão em produção
          npm run test:e2e:production
      
      - name: Rollback on failure
        if: failure()
        env:
          KUBECONFIG: kubeconfig
        run: |
          echo "Deployment failed, rolling back..."
          kubectl rollout undo deployment/techze-diagnostic-backend -n production
          kubectl rollout undo deployment/techze-diagnostic-frontend -n production
          
          # Aguardar rollback
          kubectl rollout status deployment/techze-diagnostic-backend -n production
          kubectl rollout status deployment/techze-diagnostic-frontend -n production
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
  
  # ==========================================
  # MONITORAMENTO PÓS-DEPLOY
  # ==========================================
  
  post-deploy-monitoring:
    name: Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'release')
    
    steps:
      - name: Wait for metrics stabilization
        run: sleep 300  # 5 minutos
      
      - name: Check system metrics
        run: |
          # Verificar métricas de sistema
          RESPONSE_TIME=$(curl -s "https://api.techze-diagnostic.com/metrics" | grep "http_request_duration_seconds" | head -1)
          ERROR_RATE=$(curl -s "https://api.techze-diagnostic.com/metrics" | grep "http_requests_total.*5.." | head -1)
          
          echo "Response time metric: $RESPONSE_TIME"
          echo "Error rate metric: $ERROR_RATE"
      
      - name: Validate SLA metrics
        run: |
          # Verificar se métricas estão dentro dos SLAs
          # Response time < 500ms
          # Error rate < 1%
          # Uptime > 99.9%
          
          python3 << EOF
          import requests
          import sys
          
          # Verificar métricas via Prometheus
          prometheus_url = "https://prometheus.techze-diagnostic.com"
          
          # Query para response time médio (últimos 5 min)
          response_time_query = 'avg(rate(http_request_duration_seconds_sum[5m]) / rate(http_request_duration_seconds_count[5m]))'
          
          # Query para error rate (últimos 5 min)
          error_rate_query = 'rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) * 100'
          
          try:
              # Verificar response time
              resp = requests.get(f"{prometheus_url}/api/v1/query", params={"query": response_time_query})
              avg_response_time = float(resp.json()["data"]["result"][0]["value"][1])
              
              if avg_response_time > 0.5:  # 500ms
                  print(f"❌ Response time SLA violated: {avg_response_time:.3f}s > 0.5s")
                  sys.exit(1)
              else:
                  print(f"✅ Response time SLA met: {avg_response_time:.3f}s")
              
              # Verificar error rate
              resp = requests.get(f"{prometheus_url}/api/v1/query", params={"query": error_rate_query})
              error_rate = float(resp.json()["data"]["result"][0]["value"][1])
              
              if error_rate > 1.0:  # 1%
                  print(f"❌ Error rate SLA violated: {error_rate:.2f}% > 1%")
                  sys.exit(1)
              else:
                  print(f"✅ Error rate SLA met: {error_rate:.2f}%")
                  
          except Exception as e:
              print(f"❌ Failed to validate SLA metrics: {e}")
              sys.exit(1)
          EOF
      
      - name: Create deployment report
        run: |
          cat << EOF > deployment-report.md
          # Deployment Report
          
          **Date**: $(date)
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Triggered by**: ${{ github.actor }}
          
          ## Deployment Status
          - ✅ Backend deployed successfully
          - ✅ Frontend deployed successfully
          - ✅ Health checks passed
          - ✅ SLA metrics validated
          
          ## Next Steps
          - Monitor system for 24h
          - Review performance metrics
          - Update documentation if needed
          EOF
          
          # Upload report
          gh release upload ${{ github.event.release.tag_name }} deployment-report.md || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}