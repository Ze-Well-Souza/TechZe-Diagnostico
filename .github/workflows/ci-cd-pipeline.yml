name: üöÄ TechZe Diagn√≥stico - CI/CD Pipeline Enterprise

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # Daily security scan at 2 AM

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # AN√ÅLISE DE C√ìDIGO E SEGURAN√áA
  # ==========================================
  security-analysis:
    name: üõ°Ô∏è Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: üîê Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ==========================================
  # TESTES FRONTEND
  # ==========================================
  frontend-tests:
    name: üé® Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: üß™ Run unit tests
        run: npm run test -- --coverage --watchAll=false

      - name: üé≠ Run E2E tests
        run: |
          npm run build
          npm run preview &
          npx wait-on http://localhost:3000
          npm run cypress:run

      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage

      - name: üîç Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true

  # ==========================================
  # TESTES BACKEND
  # ==========================================
  backend-tests:
    name: üîß Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: techze_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd microservices/diagnostic_service
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: üß™ Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/techze_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd microservices/diagnostic_service
          pytest --cov=app --cov-report=xml tests/

      - name: üìä Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./microservices/diagnostic_service/coverage.xml

  # ==========================================
  # BUILD E REGISTRY
  # ==========================================
  build-and-push:
    name: üê≥ Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-analysis, frontend-tests, backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

  # ==========================================
  # DEPLOY STAGING
  # ==========================================
  deploy-staging:
    name: üöß Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: üöÄ Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment script here
          # Example: kubectl, docker-compose, or cloud provider CLI

      - name: üß™ Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke tests here

  # ==========================================
  # DEPLOY PRODUCTION
  # ==========================================
  deploy-production:
    name: üåê Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: üöÄ Deploy to Production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Deploying to production..."
          
          # Deploy via Render API
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "clearCache": "do_not_clear",
              "serviceId": "'$RENDER_SERVICE_ID'"
            }' \
            https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys

      - name: üè• Health check
        run: |
          echo "Performing health check..."
          for i in {1..30}; do
            if curl -f https://techreparo.com/api/health; then
              echo "Health check passed!"
              break
            fi
            echo "Waiting for service to be ready... ($i/30)"
            sleep 10
          done

      - name: üîî Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # ==========================================
  # PERFORMANCE TESTING
  # ==========================================
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: üèÉ‚Äç‚ôÇÔ∏è Run k6 load tests
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          BASE_URL: https://staging.techreparo.com

      - name: üìà Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: results.json

  # ==========================================
  # MONITORING SETUP
  # ==========================================
  setup-monitoring:
    name: üìä Setup Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: üìä Configure Grafana dashboards
        run: |
          echo "Setting up Grafana dashboards..."
          # Add Grafana configuration

      - name: üö® Setup alerts
        run: |
          echo "Configuring Prometheus alerts..."
          # Add Prometheus alert rules

  # ==========================================
  # DATABASE MIGRATIONS
  # ==========================================
  database-migrations:
    name: üóÑÔ∏è Database Migrations
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üîÑ Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          pip install alembic psycopg2-binary
          cd microservices/diagnostic_service
          alembic upgrade head

  # ==========================================
  # CLEANUP
  # ==========================================
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-tests]
    if: always()
    steps:
      - name: üßπ Clean up old images
        run: |
          echo "Cleaning up old Docker images..."
          # Add cleanup script for old images

      - name: üìä Generate deployment report
        run: |
          echo "Generating deployment report..."
          # Add reporting logic 